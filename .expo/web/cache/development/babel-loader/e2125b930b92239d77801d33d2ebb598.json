{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/alex/workspace/papamama/src/screens/OrdersHistoryScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { Context as AppSettingsContext } from \"../context/AppSettingsContext\";\nimport { Context as AuthContext } from \"../context/AuthContext\";\nimport { NavigationEvents } from 'react-navigation';\nimport Header from \"../components/shared/Header\";\nimport { SafeView, Block, DataLoadingIndicator, HorizontalDivider, FlatListFooter } from \"../components/shared\";\nimport NoContentBlock from \"../components/shared/NoContentBlock\";\nimport { NetworkErrorModal } from \"../components/modals\";\nimport OrderCard from \"../components/auth/OrderCard\";\nimport axiosWithToken from \"../services/axiosWithToken\";\nimport { BASE_URL, APP_VERSION } from \"../different/global_vars\";\nimport { prepareLanguageToHttpRequest } from \"../helpers/helpers\";\nimport translator from \"../translator/translator\";\nimport styles from \"../styles/screens/orders-history-screen\";\n\nvar OrdersHistoryScreen = function OrdersHistoryScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useContext = useContext(AppSettingsContext),\n      _useContext$state = _useContext.state,\n      scales = _useContext$state.scales,\n      language = _useContext$state.language;\n\n  var _useContext2 = useContext(AuthContext),\n      user = _useContext2.state.user;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      history = _useState2[0],\n      setHistory = _useState2[1];\n\n  var _useState3 = useState({\n    language: null\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      historyMetaData = _useState4[0],\n      setHistoryMetaData = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isDataLoading = _useState6[0],\n      setIsDataLoading = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isMoreDataLoading = _useState8[0],\n      setIsMoreDataLoading = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      isDataRefreshing = _useState10[0],\n      setIsDataRefreshing = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      error = _useState12[0],\n      setError = _useState12[1];\n\n  var fetchHistory = function fetchHistory() {\n    var isRefresh,\n        isMore,\n        page,\n        lang,\n        url,\n        response,\n        history_data,\n        meta,\n        data,\n        _args = arguments;\n    return _regeneratorRuntime.async(function fetchHistory$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            isRefresh = _args.length > 0 && _args[0] !== undefined ? _args[0] : false;\n            isMore = _args.length > 1 && _args[1] !== undefined ? _args[1] : false;\n            page = _args.length > 2 && _args[2] !== undefined ? _args[2] : 1;\n            _context.prev = 3;\n\n            if (isMore) {\n              setIsMoreDataLoading(true);\n            } else if (isRefresh) {\n              setIsDataRefreshing(true);\n            } else {\n              setIsDataLoading(true);\n            }\n\n            lang = prepareLanguageToHttpRequest(language);\n            url = BASE_URL + \"/order/history?lang=\" + lang + \"&version=\" + APP_VERSION + \"&page=\" + page + \"&limit=6\";\n            _context.next = 9;\n            return _regeneratorRuntime.awrap(axiosWithToken.get(url));\n\n          case 9:\n            response = _context.sent;\n\n            if (!(response && response.data && response.data.data)) {\n              _context.next = 25;\n              break;\n            }\n\n            history_data = response.data.data;\n            meta = _objectSpread({\n              language: language\n            }, response.data.meta);\n\n            if (!(history_data && history_data.length)) {\n              _context.next = 21;\n              break;\n            }\n\n            data = isMore ? [].concat(_toConsumableArray(history), _toConsumableArray(history_data)) : history_data;\n            setHistory(data);\n            setHistoryMetaData(meta);\n            setError(false);\n            return _context.abrupt(\"return\", history_data);\n\n          case 21:\n            setHistory(true);\n            setError(false);\n\n          case 23:\n            _context.next = 27;\n            break;\n\n          case 25:\n            setHistory(false);\n            setError(true);\n\n          case 27:\n            _context.next = 33;\n            break;\n\n          case 29:\n            _context.prev = 29;\n            _context.t0 = _context[\"catch\"](3);\n            setHistory(false);\n            setError(true);\n\n          case 33:\n            _context.prev = 33;\n\n            if (isMore) {\n              setIsMoreDataLoading(false);\n            } else if (isRefresh) {\n              setIsDataRefreshing(false);\n            } else {\n              setIsDataLoading(false);\n            }\n\n            return _context.finish(33);\n\n          case 36:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[3, 29, 33, 36]], Promise);\n  };\n\n  var handleFocus = function handleFocus() {\n    if (!history || !history.length || historyMetaData.language !== language) {\n      return fetchHistory();\n    }\n  };\n\n  var downloadMoreHistory = function downloadMoreHistory() {\n    if (isMoreDataLoading) return;\n    var currentPage = parseInt(historyMetaData.current_page);\n    var lastPage = parseInt(historyMetaData.total_pages);\n    var nextPage = currentPage + 1;\n    if (nextPage > lastPage) return;\n    return fetchHistory(false, true, nextPage);\n  };\n\n  var renderListFooterComponent = function renderListFooterComponent() {\n    return isMoreDataLoading ? React.createElement(FlatListFooter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 36\n      }\n    }) : null;\n  };\n\n  var updateRating = function updateRating(orderId, rating) {\n    return setHistory(history.map(function (item) {\n      if (item.order_id === orderId) {\n        item.rating = rating;\n      }\n\n      return item;\n    }));\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(SafeView, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, React.createElement(NavigationEvents, {\n    onWillFocus: function onWillFocus() {\n      return handleFocus();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 17\n    }\n  }), React.createElement(Header, {\n    title: translator.translate(language, \"Історія замовлень\"),\n    backAllowed: true,\n    navigation: navigation,\n    noIcons: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }\n  }), React.createElement(View, {\n    style: styles(scales).body,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 17\n    }\n  }, !error ? !isDataLoading ? history ? history.length ? React.createElement(FlatList, {\n    showsVerticalScrollIndicator: false,\n    keyExtractor: function keyExtractor(order) {\n      return \"key\" + order.order_id;\n    },\n    data: history,\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(OrderCard, {\n        order: item,\n        navigation: navigation,\n        updateRatingCallback: updateRating,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 85\n        }\n      });\n    },\n    ItemSeparatorComponent: function ItemSeparatorComponent() {\n      return React.createElement(Block, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 69\n        }\n      }, React.createElement(HorizontalDivider, {\n        height: 1,\n        marginVertical: 16,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 73\n        }\n      }));\n    },\n    contentContainerStyle: {\n      paddingVertical: Math.round(scales.heightScale * 15)\n    },\n    bounces: false,\n    ListFooterComponent: function ListFooterComponent() {\n      return renderListFooterComponent();\n    },\n    onRefresh: function onRefresh() {\n      return fetchHistory(true);\n    },\n    refreshing: isDataRefreshing,\n    onEndReached: downloadMoreHistory,\n    onEndReachedThreshold: 0.05,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 57\n    }\n  }) : React.createElement(NoContentBlock, {\n    title: translator.translate(language, \"Ви не здійснили жодного замовлення\"),\n    note: translator.translate(language, \"Можливо вас зацікавлять наші пропозиції і Ви щось виберете?\"),\n    toMenuLink: true,\n    navigation: navigation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 57\n    }\n  }) : null : React.createElement(DataLoadingIndicator, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 39\n    }\n  }) : React.createElement(NetworkErrorModal, {\n    isOpened: error,\n    closeCallback: function closeCallback() {\n      return setError(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 31\n    }\n  }))));\n};\n\nexport default OrdersHistoryScreen;","map":{"version":3,"sources":["/home/alex/workspace/papamama/src/screens/OrdersHistoryScreen.js"],"names":["React","useContext","useState","Context","AppSettingsContext","AuthContext","NavigationEvents","Header","SafeView","Block","DataLoadingIndicator","HorizontalDivider","FlatListFooter","NoContentBlock","NetworkErrorModal","OrderCard","axiosWithToken","BASE_URL","APP_VERSION","prepareLanguageToHttpRequest","translator","styles","OrdersHistoryScreen","navigation","state","scales","language","user","history","setHistory","historyMetaData","setHistoryMetaData","isDataLoading","setIsDataLoading","isMoreDataLoading","setIsMoreDataLoading","isDataRefreshing","setIsDataRefreshing","error","setError","fetchHistory","isRefresh","isMore","page","lang","url","get","response","data","history_data","meta","length","handleFocus","downloadMoreHistory","currentPage","parseInt","current_page","lastPage","total_pages","nextPage","renderListFooterComponent","updateRating","orderId","rating","map","item","order_id","translate","body","order","paddingVertical","Math","round","heightScale"],"mappings":"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","sourcesContent":["//----IMPORTS----//\n//React\nimport React, {useContext, useState} from 'react';\n//React native\nimport {View, FlatList} from 'react-native';\n//Context\nimport {Context as AppSettingsContext} from \"../context/AppSettingsContext\";\nimport {Context as AuthContext} from \"../context/AuthContext\";\n//Navigation Events\nimport {NavigationEvents} from 'react-navigation';\n//Componetns\nimport Header from \"../components/shared/Header\";\nimport {SafeView, Block, DataLoadingIndicator, HorizontalDivider, FlatListFooter} from \"../components/shared\";\nimport NoContentBlock from \"../components/shared/NoContentBlock\";\nimport {NetworkErrorModal} from \"../components/modals\";\nimport OrderCard from \"../components/auth/OrderCard\";\n//Api\nimport axiosWithToken from \"../services/axiosWithToken\";\n//Global vars\nimport {BASE_URL, APP_VERSION} from \"../different/global_vars\";\n//Helpers\nimport {prepareLanguageToHttpRequest} from \"../helpers/helpers\";\n//Localization\nimport translator from \"../translator/translator\";\n//Styles\nimport styles from '../styles/screens/orders-history-screen';\n\n\n//----COMPONENT----//\nconst OrdersHistoryScreen = ({navigation}) => {\n    //Data and State\n    const {state: {scales, language}} = useContext(AppSettingsContext);\n    const {state: {user}} = useContext(AuthContext);\n\n    const [history, setHistory] = useState(false);\n    const [historyMetaData, setHistoryMetaData] = useState({\n        language: null\n    });\n    const [isDataLoading, setIsDataLoading] = useState(false);\n    const [isMoreDataLoading, setIsMoreDataLoading] = useState(false);\n    const [isDataRefreshing, setIsDataRefreshing] = useState(false);\n    const [error, setError] = useState(false);\n\n\n    //Hooks and Methods\n    const fetchHistory = async (isRefresh = false, isMore = false, page = 1) => {\n        try {\n            if (isMore) {\n                setIsMoreDataLoading(true);\n            } else if (isRefresh) {\n                setIsDataRefreshing(true);\n            } else {\n                setIsDataLoading(true);\n            }\n\n            const lang = prepareLanguageToHttpRequest(language);\n            const url = `${BASE_URL}/order/history?lang=${lang}&version=${APP_VERSION}&page=${page}&limit=6`;\n\n            const response = await axiosWithToken.get(url);\n\n            if (response && response.data && response.data.data) {\n                let history_data = response.data.data;\n                let meta = {language, ...response.data.meta}\n\n                if (history_data && history_data.length) {\n                    let data = isMore ? [...history, ...history_data] : history_data;\n                    setHistory(data);\n                    setHistoryMetaData(meta);\n                    setError(false);\n                    return history_data;\n                } else {\n                    setHistory(true);\n                    setError(false);\n                }\n            } else {\n                setHistory(false);\n                setError(true);\n            }\n        } catch (error) {\n            setHistory(false);\n            setError(true);\n        } finally {\n            if (isMore) {\n                setIsMoreDataLoading(false);\n            } else if (isRefresh) {\n                setIsDataRefreshing(false);\n            } else {\n                setIsDataLoading(false);\n            }\n        }\n    }\n\n    const handleFocus = () => {\n        if (!history || !history.length || historyMetaData.language !== language) {\n            return fetchHistory();\n        }\n    }\n\n\n    const downloadMoreHistory = () => {\n        if (isMoreDataLoading) return;\n\n        let currentPage = parseInt(historyMetaData.current_page);\n        let lastPage = parseInt(historyMetaData.total_pages);\n        let nextPage = currentPage + 1;\n\n        if (nextPage > lastPage) return;\n        return fetchHistory(false, true, nextPage);\n    }\n\n\n    const renderListFooterComponent = () => {\n        return isMoreDataLoading ? <FlatListFooter/> : null\n    }\n\n\n    const updateRating = (orderId, rating) => {\n        return setHistory(history.map(item => {\n            if (item.order_id === orderId) {\n                item.rating = rating;\n            }\n            return item;\n        }));\n    }\n\n\n    //Template\n    return (\n        <>\n            <SafeView>\n                <NavigationEvents\n                    onWillFocus={() => handleFocus()}\n                />\n                <Header\n                    title={translator.translate(language, \"Історія замовлень\")}\n                    backAllowed\n                    navigation={navigation}\n                    noIcons\n                />\n                <View style={styles(scales).body}>\n                    {\n                        !error\n                            ? (\n                                !isDataLoading\n                                    ? (\n                                        history\n                                            ? (\n                                                history.length\n                                                    ? (\n                                                        <FlatList\n                                                            showsVerticalScrollIndicator={false}\n                                                            keyExtractor={order => \"key\" + order.order_id}\n                                                            data={history}\n                                                            renderItem={({item}) => <OrderCard order={item} navigation={navigation} updateRatingCallback={updateRating}/>}\n                                                            ItemSeparatorComponent={() => {\n                                                                return (\n                                                                    <Block>\n                                                                        <HorizontalDivider height={1} marginVertical={16}/>\n                                                                    </Block>\n                                                                )\n                                                            }}\n                                                            contentContainerStyle={{paddingVertical: Math.round(scales.heightScale * 15)}}\n                                                            bounces={false}\n                                                            ListFooterComponent={() => renderListFooterComponent()}\n                                                            onRefresh={() => fetchHistory(true)}\n                                                            refreshing={isDataRefreshing}\n                                                            onEndReached={downloadMoreHistory}\n                                                            onEndReachedThreshold={0.05}\n                                                        />\n                                                    ) : <NoContentBlock\n                                                        title={translator.translate(language, \"Ви не здійснили жодного замовлення\")}\n                                                        note={translator.translate(language, \"Можливо вас зацікавлять наші пропозиції і Ви щось виберете?\")}\n                                                        toMenuLink={true}\n                                                        navigation={navigation}\n                                                    />\n                                            )\n                                            : null\n                                    )\n                                    : <DataLoadingIndicator/>\n                            )\n                            : <NetworkErrorModal\n                                isOpened={error}\n                                closeCallback={() => setError(false)}\n                            />\n                    }\n                </View>\n            </SafeView>\n        </>\n    );\n}\n\n\n//----EXPORT----//\nexport default OrdersHistoryScreen;"]},"metadata":{},"sourceType":"module"}