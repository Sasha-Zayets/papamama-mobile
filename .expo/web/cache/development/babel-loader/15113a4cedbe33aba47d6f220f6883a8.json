{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/alex/workspace/papamama/src/screens/MenuScreen.js\";\nimport React, { useEffect, useState, useContext } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { NavigationEvents } from 'react-navigation';\nimport { Context as AppSettingsContext } from \"../context/AppSettingsContext\";\nimport { Context as AuthContext } from \"../context/AuthContext\";\nimport { TabView, SceneMap, TabBar } from 'react-native-tab-view';\nimport Header from \"../components/shared/Header\";\nimport { SafeView, DataLoadingIndicator, VerticalSpacer, Spacer } from \"../components/shared\";\nimport InitAppLoadingIndicator from \"../components/shared/InitAppLoadingIndicator\";\nimport { NetworkErrorModal } from \"../components/modals\";\nimport ProductsBlock from \"../components/menu/ProductsBlock\";\nimport NoContentBlock from \"../components/shared/NoContentBlock\";\nimport { createIconSetFromIcoMoon } from \"@expo/vector-icons\";\nimport icoMoonConfig from \"../../selection.json\";\nimport logoImage from \"../../assets/images/old-logo.png\";\nvar IcoMoonIcon = createIconSetFromIcoMoon(icoMoonConfig, 'icomoon', 'icomoon.ttf');\nimport translator from \"../translator/translator\";\nimport { prepareLanguageToHttpRequest } from \"../helpers/helpers\";\nimport { BASE_URL, APP_VERSION } from \"../different/global_vars\";\nimport axiosWithErrorHandler from \"../services/axiosWithErrorHandler\";\nimport styles from \"../styles/screens/menu-screen\";\nimport { app_styles } from \"../styles/app_styles\";\nimport { ButtonOrder, ButtonPrimary } from \"../components/buttons\";\n\nvar MenuScreen = function MenuScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useContext = useContext(AppSettingsContext),\n      _useContext$state = _useContext.state,\n      scales = _useContext$state.scales,\n      appSettings = _useContext$state.appSettings,\n      screen_width = _useContext$state.screen_width,\n      settingsNetworkError = _useContext$state.settingsNetworkError,\n      language = _useContext$state.language,\n      setLanguage = _useContext.setLanguage,\n      getAppSettings = _useContext.getAppSettings,\n      clearSettingsNetworkError = _useContext.clearSettingsNetworkError;\n\n  var _useContext2 = useContext(AuthContext),\n      _useContext2$state = _useContext2.state,\n      user = _useContext2$state.user,\n      networkError = _useContext2$state.networkError,\n      unreadNotifications = _useContext2$state.unreadNotifications,\n      isLoggedIn = _useContext2$state.isLoggedIn,\n      fetchUserByToken = _useContext2.fetchUserByToken,\n      getUserNotifications = _useContext2.getUserNotifications,\n      clearNetworkError = _useContext2.clearNetworkError;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      index = _useState2[0],\n      setIndex = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isSettingsDataFetching = _useState4[0],\n      setIsSettingsDataFetched = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isDataFetching = _useState6[0],\n      setIsDataFetching = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      fetchingError = _useState8[0],\n      setFetchingError = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      categories = _useState10[0],\n      setCategories = _useState10[1];\n\n  var _useState11 = useState({\n    language: null\n  }),\n      _useState12 = _slicedToArray(_useState11, 2),\n      categoriesMeta = _useState12[0],\n      setCategoriesMeta = _useState12[1];\n\n  var _useState13 = useState([]),\n      _useState14 = _slicedToArray(_useState13, 2),\n      routes = _useState14[0],\n      setRoutes = _useState14[1];\n\n  useEffect(function () {\n    if (Object.keys(appSettings).length) {\n      getCategories();\n    }\n  }, [appSettings, language]);\n\n  var getCategories = function getCategories() {\n    var language, lang, url, response, _categories, _routes;\n\n    return _regeneratorRuntime.async(function getCategories$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.t0 = language;\n\n            if (_context.t0) {\n              _context.next = 5;\n              break;\n            }\n\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('language'));\n\n          case 4:\n            _context.t0 = _context.sent;\n\n          case 5:\n            language = _context.t0;\n\n            if (!(categories.length && categoriesMeta.language === language)) {\n              _context.next = 8;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 8:\n            setIsDataFetching(true);\n            _context.prev = 9;\n            lang = prepareLanguageToHttpRequest(language);\n            url = BASE_URL + \"/product/categories?lang=\" + lang + \"&version=\" + APP_VERSION + \"&parent_id=0\";\n            _context.next = 14;\n            return _regeneratorRuntime.awrap(axiosWithErrorHandler.get(url));\n\n          case 14:\n            response = _context.sent;\n\n            if (!response) {\n              _context.next = 29;\n              break;\n            }\n\n            _categories = response.data.data;\n\n            if (!_categories.length) {\n              _context.next = 27;\n              break;\n            }\n\n            _routes = [];\n\n            _categories.forEach(function (item) {\n              _routes.push({\n                key: item.name,\n                title: item.name,\n                category: item,\n                pizza_category_id: appSettings.pizzaCategoryId || 0,\n                navigation: navigation,\n                scales: scales,\n                language: language\n              });\n            });\n\n            setRoutes(_routes);\n            setCategories(_categories);\n            setCategoriesMeta({\n              language: language\n            });\n            setFetchingError(false);\n            return _context.abrupt(\"return\", _categories);\n\n          case 27:\n            setFetchingError(false);\n            setCategories(true);\n\n          case 29:\n            _context.next = 35;\n            break;\n\n          case 31:\n            _context.prev = 31;\n            _context.t1 = _context[\"catch\"](9);\n            setCategories(false);\n            setFetchingError(true);\n\n          case 35:\n            _context.prev = 35;\n            setIsDataFetching(false);\n            return _context.finish(35);\n\n          case 38:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[9, 31, 35, 38]], Promise);\n  };\n\n  var getSceneMap = function getSceneMap() {\n    var sceneMap = {};\n    routes.map(function (item, index) {\n      sceneMap[item.key] = ProductsBlock;\n    });\n    return sceneMap;\n  };\n\n  var initialLayout = {\n    width: screen_width\n  };\n  var renderScene = SceneMap(getSceneMap());\n\n  var renderTabBar = function renderTabBar(props) {\n    return React.createElement(TabBar, _extends({}, props, {\n      indicatorStyle: {\n        backgroundColor: app_styles(scales).colors.text.red\n      },\n      style: {\n        backgroundColor: '#ffffff'\n      },\n      renderIcon: function renderIcon(_ref2) {\n        var route = _ref2.route,\n            focused = _ref2.focused,\n            color = _ref2.color;\n        return React.createElement(Image, {\n          source: {\n            uri: route.category.image\n          },\n          style: styles(scales).menu_icon,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 24\n          }\n        });\n      },\n      renderLabel: function renderLabel(_ref3) {\n        var route = _ref3.route,\n            focused = _ref3.focused,\n            color = _ref3.color;\n        return React.createElement(Text, {\n          style: [styles(scales).label, {\n            color: focused ? app_styles(scales).colors.text.primary : app_styles(scales).colors.text.black\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 21\n          }\n        }, route.title);\n      },\n      scrollEnabled: true,\n      bounces: true,\n      tabStyle: styles(scales).tab,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  var getUserByToken = function getUserByToken() {\n    var token;\n    return _regeneratorRuntime.async(function getUserByToken$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('token'));\n\n          case 2:\n            token = _context2.sent;\n\n            if (!token) {\n              _context2.next = 7;\n              break;\n            }\n\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(fetchUserByToken());\n\n          case 6:\n            getUserNotifications();\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var setAppSettings = function setAppSettings() {\n    var language;\n    return _regeneratorRuntime.async(function setAppSettings$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('language'));\n\n          case 2:\n            language = _context3.sent;\n            language ? setLanguage(language, false) : setLanguage('ukrainian', false);\n            _context3.next = 6;\n            return _regeneratorRuntime.awrap(getAppSettings());\n\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handleCloseErrorModal = function handleCloseErrorModal() {\n    if (fetchingError) {\n      return setFetchingError(false);\n    }\n  };\n\n  var handleFocus = function handleFocus() {\n    return _regeneratorRuntime.async(function handleFocus$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return _regeneratorRuntime.awrap(startAppDataFetching());\n\n          case 2:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var startAppDataFetching = function startAppDataFetching() {\n    return _regeneratorRuntime.async(function startAppDataFetching$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            if (!(Object.keys(appSettings).length || Object.keys(user).length)) {\n              _context5.next = 2;\n              break;\n            }\n\n            return _context5.abrupt(\"return\");\n\n          case 2:\n            setIsSettingsDataFetched(true);\n            _context5.next = 5;\n            return _regeneratorRuntime.awrap(setAppSettings());\n\n          case 5:\n            _context5.next = 7;\n            return _regeneratorRuntime.awrap(getUserByToken());\n\n          case 7:\n            setIsSettingsDataFetched(false);\n\n          case 8:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handleTryAgain = function handleTryAgain() {\n    return _regeneratorRuntime.async(function handleTryAgain$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            if (settingsNetworkError) {\n              clearSettingsNetworkError();\n            }\n\n            if (networkError) {\n              clearNetworkError();\n            }\n\n            setIsSettingsDataFetched(true);\n            _context6.next = 5;\n            return _regeneratorRuntime.awrap(startAppDataFetching());\n\n          case 5:\n            setIsSettingsDataFetched(false);\n\n          case 6:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(NavigationEvents, {\n    onWillFocus: handleFocus,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }\n  }), !(settingsNetworkError || networkError) ? !isSettingsDataFetching ? React.createElement(SafeView, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 33\n    }\n  }, React.createElement(Header, {\n    navigation: navigation,\n    exclamation: true,\n    displayBell: true,\n    isLogged: isLoggedIn,\n    unreadNotifications: unreadNotifications,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 37\n    }\n  }), React.createElement(View, {\n    style: styles(scales).body,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 37\n    }\n  }, !fetchingError ? !isDataFetching ? categories ? categories.length ? React.createElement(TabView, {\n    renderTabBar: renderTabBar,\n    navigationState: {\n      index: index,\n      routes: routes\n    },\n    renderScene: renderScene,\n    onIndexChange: setIndex,\n    initialLayout: initialLayout,\n    lazy: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 75\n    }\n  }) : React.createElement(NoContentBlock, {\n    title: translator.translate(language, \"Вибачте\"),\n    note: translator.translate(language, \"На даний момент меню не доступне\"),\n    navigation: navigation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 75\n    }\n  }) : null : React.createElement(DataLoadingIndicator, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 59\n    }\n  }) : null)) : React.createElement(InitAppLoadingIndicator, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 31\n    }\n  }) : React.createElement(React.Fragment, null, React.createElement(StatusBar, {\n    backgroundColor: app_styles(scales).colors.app.blue,\n    barStyle: \"light-content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 29\n    }\n  }), React.createElement(View, {\n    style: styles(scales).error_container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 29\n    }\n  }, React.createElement(Image, {\n    source: logoImage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 33\n    }\n  }), React.createElement(Spacer, {\n    spaceHeight: 40,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 33\n    }\n  }), React.createElement(Text, {\n    style: styles(scales).error_title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 33\n    }\n  }, \"OOOPPPSSS....\"), React.createElement(Spacer, {\n    spaceHeight: 15,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 33\n    }\n  }), React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 33\n    }\n  }, React.createElement(Text, {\n    style: styles(scales).error_text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 37\n    }\n  }, \"\\u0429\\u043E\\u0441\\u044C \\u043F\\u0456\\u0448\\u043B\\u043E \\u043D\\u0435 \\u0442\\u0430\\u043A... \\u0421\\u0442\\u0430\\u043B\\u0430\\u0441\\u044F \\u0432\\u043D\\u0443\\u0442\\u0440\\u0456\\u0448\\u043D\\u044F \\u043F\\u043E\\u043C\\u0438\\u043B\\u043A\\u0430, \\u0430\\u0431\\u043E \\u0432\\u0456\\u0434\\u0441\\u0443\\u0442\\u043D\\u0454 \\u0437'\\u0454\\u0434\\u043D\\u0430\\u043D\\u043D\\u044F \\u0437 \\u0456\\u043D\\u0442\\u0435\\u0440\\u043D\\u0435\\u0442\\u043E\\u043C.\")), React.createElement(Spacer, {\n    spaceHeight: 30,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 33\n    }\n  }), React.createElement(View, {\n    style: {\n      paddingHorizontal: Math.round(scales.widthScale * 50),\n      alignSelf: 'stretch'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 33\n    }\n  }, React.createElement(ButtonOrder, {\n    color: '#ED7225',\n    title: \"Спробувати ще\",\n    callback: handleTryAgain,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 37\n    }\n  })))), React.createElement(NetworkErrorModal, {\n    isOpened: fetchingError,\n    closeCallback: handleCloseErrorModal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default MenuScreen;","map":{"version":3,"sources":["/home/alex/workspace/papamama/src/screens/MenuScreen.js"],"names":["React","useEffect","useState","useContext","NavigationEvents","Context","AppSettingsContext","AuthContext","TabView","SceneMap","TabBar","Header","SafeView","DataLoadingIndicator","VerticalSpacer","Spacer","InitAppLoadingIndicator","NetworkErrorModal","ProductsBlock","NoContentBlock","createIconSetFromIcoMoon","icoMoonConfig","logoImage","IcoMoonIcon","translator","prepareLanguageToHttpRequest","BASE_URL","APP_VERSION","axiosWithErrorHandler","styles","app_styles","ButtonOrder","ButtonPrimary","MenuScreen","navigation","state","scales","appSettings","screen_width","settingsNetworkError","language","setLanguage","getAppSettings","clearSettingsNetworkError","user","networkError","unreadNotifications","isLoggedIn","fetchUserByToken","getUserNotifications","clearNetworkError","index","setIndex","isSettingsDataFetching","setIsSettingsDataFetched","isDataFetching","setIsDataFetching","fetchingError","setFetchingError","categories","setCategories","categoriesMeta","setCategoriesMeta","routes","setRoutes","Object","keys","length","getCategories","AsyncStorage","getItem","lang","url","get","response","data","forEach","item","push","key","name","title","category","pizza_category_id","pizzaCategoryId","getSceneMap","sceneMap","map","initialLayout","width","renderScene","renderTabBar","props","backgroundColor","colors","text","red","route","focused","color","uri","image","menu_icon","label","primary","black","tab","getUserByToken","token","setAppSettings","handleCloseErrorModal","handleFocus","startAppDataFetching","handleTryAgain","body","translate","app","blue","error_container","error_title","error_text","paddingHorizontal","Math","round","widthScale","alignSelf"],"mappings":";;;;AAEA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,EAAoCC,UAApC,QAAqD,OAArD;;;;;;;;AAIA,SAAQC,gBAAR,QAA+B,kBAA/B;AAEA,SAAQC,OAAO,IAAIC,kBAAnB;AACA,SAAQD,OAAO,IAAIE,WAAnB;AAEA,SAAQC,OAAR,EAAiBC,QAAjB,EAA2BC,MAA3B,QAAwC,uBAAxC;AAEA,OAAOC,MAAP;AACA,SAAQC,QAAR,EAAkBC,oBAAlB,EAAwCC,cAAxC,EAAwDC,MAAxD;AACA,OAAOC,uBAAP;AACA,SAAQC,iBAAR;AACA,OAAOC,aAAP;AACA,OAAOC,cAAP;AAEA,SAAQC,wBAAR;AACA,OAAOC,aAAP;AAGA,OAAOC,SAAP;AAEA,IAAMC,WAAW,GAAGH,wBAAwB,CAACC,aAAD,EAAgB,SAAhB,EAA2B,aAA3B,CAA5C;AAEA,OAAOG,UAAP;AAEA,SAAQC,4BAAR;AAEA,SAAQC,QAAR,EAAkBC,WAAlB;AAEA,OAAOC,qBAAP;AAEA,OAAOC,MAAP;AACA,SAAQC,UAAR;AACA,SAAQC,WAAR,EAAqBC,aAArB;;AAIA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAAkB;AAAA,MAAhBC,UAAgB,QAAhBA,UAAgB;;AAAA,oBAE4G/B,UAAU,CAACG,kBAAD,CAFtH;AAAA,sCAE1B6B,KAF0B;AAAA,MAElBC,MAFkB,qBAElBA,MAFkB;AAAA,MAEVC,WAFU,qBAEVA,WAFU;AAAA,MAEGC,YAFH,qBAEGA,YAFH;AAAA,MAEiBC,oBAFjB,qBAEiBA,oBAFjB;AAAA,MAEuCC,QAFvC,qBAEuCA,QAFvC;AAAA,MAEkDC,WAFlD,eAEkDA,WAFlD;AAAA,MAE+DC,cAF/D,eAE+DA,cAF/D;AAAA,MAE+EC,yBAF/E,eAE+EA,yBAF/E;;AAAA,qBAGiGxC,UAAU,CAACI,WAAD,CAH3G;AAAA,wCAG1B4B,KAH0B;AAAA,MAGlBS,IAHkB,sBAGlBA,IAHkB;AAAA,MAGZC,YAHY,sBAGZA,YAHY;AAAA,MAGEC,mBAHF,sBAGEA,mBAHF;AAAA,MAGuBC,UAHvB,sBAGuBA,UAHvB;AAAA,MAGoCC,gBAHpC,gBAGoCA,gBAHpC;AAAA,MAGsDC,oBAHtD,gBAGsDA,oBAHtD;AAAA,MAG4EC,iBAH5E,gBAG4EA,iBAH5E;;AAAA,kBAKPhD,QAAQ,CAAC,CAAD,CALD;AAAA;AAAA,MAK1BiD,KAL0B;AAAA,MAKnBC,QALmB;;AAAA,mBAO0BlD,QAAQ,CAAC,IAAD,CAPlC;AAAA;AAAA,MAO1BmD,sBAP0B;AAAA,MAOFC,wBAPE;;AAAA,mBAQWpD,QAAQ,CAAC,KAAD,CARnB;AAAA;AAAA,MAQ1BqD,cAR0B;AAAA,MAQVC,iBARU;;AAAA,mBAUStD,QAAQ,CAAC,KAAD,CAVjB;AAAA;AAAA,MAU1BuD,aAV0B;AAAA,MAUXC,gBAVW;;AAAA,mBAWGxD,QAAQ,CAAC,KAAD,CAXX;AAAA;AAAA,MAW1ByD,UAX0B;AAAA,MAWdC,aAXc;;AAAA,oBAYW1D,QAAQ,CAAC;AACjDsC,IAAAA,QAAQ,EAAE;AADuC,GAAD,CAZnB;AAAA;AAAA,MAY1BqB,cAZ0B;AAAA,MAYVC,iBAZU;;AAAA,oBAeL5D,QAAQ,CAAC,EAAD,CAfH;AAAA;AAAA,MAe1B6D,MAf0B;AAAA,MAelBC,SAfkB;;AAmBjC/D,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAGgE,MAAM,CAACC,IAAP,CAAY7B,WAAZ,EAAyB8B,MAA5B,EAAmC;AAC/BC,MAAAA,aAAa;AAChB;AACJ,GAJQ,EAIN,CAAC/B,WAAD,EAAcG,QAAd,CAJM,CAAT;;AAOA,MAAM4B,aAAa,GAAG,SAAhBA,aAAgB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,0BACD5B,QADC;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,6CACiB6B,YAAY,CAACC,OAAb,CAAqB,UAArB,CADjB;;AAAA;AAAA;;AAAA;AACZ9B,YAAAA,QADY;;AAAA,kBAGdmB,UAAU,CAACQ,MAAX,IAAqBN,cAAc,CAACrB,QAAf,KAA4BA,QAHnC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAKlBgB,YAAAA,iBAAiB,CAAC,IAAD,CAAjB;AALkB;AAORe,YAAAA,IAPQ,GAOD9C,4BAA4B,CAACe,QAAD,CAP3B;AAQRgC,YAAAA,GARQ,GAQC9C,QARD,iCAQqC6C,IARrC,iBAQqD5C,WARrD;AAAA;AAAA,6CASSC,qBAAqB,CAAC6C,GAAtB,CAA0BD,GAA1B,CATT;;AAAA;AASRE,YAAAA,QATQ;;AAAA,iBAUVA,QAVU;AAAA;AAAA;AAAA;;AAWNf,YAAAA,WAXM,GAWOe,QAAQ,CAACC,IAAT,CAAcA,IAXrB;;AAAA,iBAYNhB,WAAU,CAACQ,MAZL;AAAA;AAAA;AAAA;;AAaFJ,YAAAA,OAbE,GAaO,EAbP;;AAcNJ,YAAAA,WAAU,CAACiB,OAAX,CAAmB,UAAAC,IAAI,EAAI;AACvBd,cAAAA,OAAM,CAACe,IAAP,CAAY;AACRC,gBAAAA,GAAG,EAAEF,IAAI,CAACG,IADF;AAERC,gBAAAA,KAAK,EAAEJ,IAAI,CAACG,IAFJ;AAGRE,gBAAAA,QAAQ,EAAEL,IAHF;AAIRM,gBAAAA,iBAAiB,EAAE9C,WAAW,CAAC+C,eAAZ,IAA+B,CAJ1C;AAKRlD,gBAAAA,UAAU,EAAVA,UALQ;AAMRE,gBAAAA,MAAM,EAANA,MANQ;AAORI,gBAAAA,QAAQ,EAARA;AAPQ,eAAZ;AASH,aAVD;;AAWAwB,YAAAA,SAAS,CAACD,OAAD,CAAT;AACAH,YAAAA,aAAa,CAACD,WAAD,CAAb;AACAG,YAAAA,iBAAiB,CAAC;AAACtB,cAAAA,QAAQ,EAARA;AAAD,aAAD,CAAjB;AACAkB,YAAAA,gBAAgB,CAAC,KAAD,CAAhB;AA5BM,6CA6BCC,WA7BD;;AAAA;AA+BND,YAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAE,YAAAA,aAAa,CAAC,IAAD,CAAb;;AAhCM;AAAA;AAAA;;AAAA;AAAA;AAAA;AAoCdA,YAAAA,aAAa,CAAC,KAAD,CAAb;AACAF,YAAAA,gBAAgB,CAAC,IAAD,CAAhB;;AArCc;AAAA;AAuCdF,YAAAA,iBAAiB,CAAC,KAAD,CAAjB;AAvCc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AA2CA,MAAM6B,WAAW,GAAG,SAAdA,WAAc,GAAM;AACtB,QAAIC,QAAQ,GAAG,EAAf;AAEAvB,IAAAA,MAAM,CAACwB,GAAP,CAAW,UAACV,IAAD,EAAO1B,KAAP,EAAiB;AACxBmC,MAAAA,QAAQ,CAACT,IAAI,CAACE,GAAN,CAAR,GAAqB7D,aAArB;AACH,KAFD;AAIA,WAAOoE,QAAP;AACH,GARD;;AAUA,MAAME,aAAa,GAAG;AAACC,IAAAA,KAAK,EAAEnD;AAAR,GAAtB;AAEA,MAAMoD,WAAW,GAAGjF,QAAQ,CAAC4E,WAAW,EAAZ,CAA5B;;AAEA,MAAMM,YAAY,GAAG,SAAfA,YAAe,CAAAC,KAAK;AAAA,WACtB,oBAAC,MAAD,eACQA,KADR;AAEI,MAAA,cAAc,EAAE;AAACC,QAAAA,eAAe,EAAE/D,UAAU,CAACM,MAAD,CAAV,CAAmB0D,MAAnB,CAA0BC,IAA1B,CAA+BC;AAAjD,OAFpB;AAGI,MAAA,KAAK,EAAE;AAACH,QAAAA,eAAe,EAAE;AAAlB,OAHX;AAII,MAAA,UAAU,EAAE,2BAA6B;AAAA,YAA3BI,KAA2B,SAA3BA,KAA2B;AAAA,YAApBC,OAAoB,SAApBA,OAAoB;AAAA,YAAXC,KAAW,SAAXA,KAAW;AACrC,eAAO,oBAAC,KAAD;AACH,UAAA,MAAM,EAAE;AAACC,YAAAA,GAAG,EAAEH,KAAK,CAACf,QAAN,CAAemB;AAArB,WADL;AAEH,UAAA,KAAK,EAAExE,MAAM,CAACO,MAAD,CAAN,CAAekE,SAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAIH,OATL;AAUI,MAAA,WAAW,EAAE,4BAA6B;AAAA,YAA3BL,KAA2B,SAA3BA,KAA2B;AAAA,YAApBC,OAAoB,SAApBA,OAAoB;AAAA,YAAXC,KAAW,SAAXA,KAAW;AACtC,eACI,oBAAC,IAAD;AACI,UAAA,KAAK,EAAE,CAACtE,MAAM,CAACO,MAAD,CAAN,CAAemE,KAAhB,EAAuB;AAACJ,YAAAA,KAAK,EAAED,OAAO,GAAGpE,UAAU,CAACM,MAAD,CAAV,CAAmB0D,MAAnB,CAA0BC,IAA1B,CAA+BS,OAAlC,GAA4C1E,UAAU,CAACM,MAAD,CAAV,CAAmB0D,MAAnB,CAA0BC,IAA1B,CAA+BU;AAA1F,WAAvB,CADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAEKR,KAAK,CAAChB,KAFX,CADJ;AAMH,OAjBL;AAkBI,MAAA,aAAa,EAAE,IAlBnB;AAmBI,MAAA,OAAO,EAAE,IAnBb;AAoBI,MAAA,QAAQ,EAAEpD,MAAM,CAACO,MAAD,CAAN,CAAesE,GApB7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADsB;AAAA,GAA1B;;AA0BA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACCtC,YAAY,CAACC,OAAb,CAAqB,OAArB,CADD;;AAAA;AACbsC,YAAAA,KADa;;AAAA,iBAEfA,KAFe;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAGT5D,gBAAgB,EAHP;;AAAA;AAIfC,YAAAA,oBAAoB;;AAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AASA,MAAM4D,cAAc,GAAG,SAAjBA,cAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACIxC,YAAY,CAACC,OAAb,CAAqB,UAArB,CADJ;;AAAA;AACb9B,YAAAA,QADa;AAEnBA,YAAAA,QAAQ,GAAGC,WAAW,CAACD,QAAD,EAAW,KAAX,CAAd,GAAkCC,WAAW,CAAC,WAAD,EAAc,KAAd,CAArD;AAFmB;AAAA,6CAGbC,cAAc,EAHD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAOA,MAAMoE,qBAAqB,GAAG,SAAxBA,qBAAwB,GAAM;AAChC,QAAIrD,aAAJ,EAAmB;AACf,aAAOC,gBAAgB,CAAC,KAAD,CAAvB;AACH;AACJ,GAJD;;AAOA,MAAMqD,WAAW,GAAG,SAAdA,WAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACVC,oBAAoB,EADV;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AAKA,MAAMA,oBAAoB,GAAG,SAAvBA,oBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA,kBACrB/C,MAAM,CAACC,IAAP,CAAY7B,WAAZ,EAAyB8B,MAAzB,IAAmCF,MAAM,CAACC,IAAP,CAAYtB,IAAZ,EAAkBuB,MADhC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAEzBb,YAAAA,wBAAwB,CAAC,IAAD,CAAxB;AAFyB;AAAA,6CAGnBuD,cAAc,EAHK;;AAAA;AAAA;AAAA,6CAInBF,cAAc,EAJK;;AAAA;AAKzBrD,YAAAA,wBAAwB,CAAC,KAAD,CAAxB;;AALyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA7B;;AASA,MAAM2D,cAAc,GAAG,SAAjBA,cAAiB;AAAA;AAAA;AAAA;AAAA;AACnB,gBAAI1E,oBAAJ,EAA0B;AACtBI,cAAAA,yBAAyB;AAC5B;;AAED,gBAAIE,YAAJ,EAAkB;AACdK,cAAAA,iBAAiB;AACpB;;AACDI,YAAAA,wBAAwB,CAAC,IAAD,CAAxB;AARmB;AAAA,6CASb0D,oBAAoB,EATP;;AAAA;AAUnB1D,YAAAA,wBAAwB,CAAC,KAAD,CAAxB;;AAVmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAcA,SACI,0CACI,oBAAC,gBAAD;AACI,IAAA,WAAW,EAAEyD,WADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAKQ,EAAExE,oBAAoB,IAAIM,YAA1B,IAEQ,CAACQ,sBAAD,GAEQ,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,MAAD;AACI,IAAA,UAAU,EAAEnB,UADhB;AAEI,IAAA,WAAW,MAFf;AAGI,IAAA,WAAW,MAHf;AAII,IAAA,QAAQ,EAAEa,UAJd;AAKI,IAAA,mBAAmB,EAAED,mBALzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAQI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEjB,MAAM,CAACO,MAAD,CAAN,CAAe8E,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQ,CAACzD,aAAD,GAEQ,CAACF,cAAD,GAEQI,UAAU,GAEFA,UAAU,CAACQ,MAAX,GACM,oBAAC,OAAD;AACE,IAAA,YAAY,EAAEwB,YADhB;AAEE,IAAA,eAAe,EAAE;AAACxC,MAAAA,KAAK,EAALA,KAAD;AAAQY,MAAAA,MAAM,EAANA;AAAR,KAFnB;AAGE,IAAA,WAAW,EAAE2B,WAHf;AAIE,IAAA,aAAa,EAAEtC,QAJjB;AAKE,IAAA,aAAa,EAAEoC,aALjB;AAME,IAAA,IAAI,MANN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADN,GASM,oBAAC,cAAD;AACE,IAAA,KAAK,EAAEhE,UAAU,CAAC2F,SAAX,CAAqB3E,QAArB,EAA+B,SAA/B,CADT;AAEE,IAAA,IAAI,EAAEhB,UAAU,CAAC2F,SAAX,CAAqB3E,QAArB,EAA+B,kCAA/B,CAFR;AAGE,IAAA,UAAU,EAAEN,UAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXJ,GAiBJ,IAnBd,GAqBM,oBAAC,oBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvBd,GAyBM,IA3Bd,CARJ,CAFR,GA0CM,oBAAC,uBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA5Cd,GA+CQ,0CACI,oBAAC,SAAD;AAAW,IAAA,eAAe,EAAEJ,UAAU,CAACM,MAAD,CAAV,CAAmB0D,MAAnB,CAA0BsB,GAA1B,CAA8BC,IAA1D;AAAgE,IAAA,QAAQ,EAAC,eAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAExF,MAAM,CAACO,MAAD,CAAN,CAAekF,eAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAEhG,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGI,oBAAC,MAAD;AAAQ,IAAA,WAAW,EAAE,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,EAII,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEO,MAAM,CAACO,MAAD,CAAN,CAAemF,WAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAJJ,EAKI,oBAAC,MAAD;AAAQ,IAAA,WAAW,EAAE,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,EAMI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE1F,MAAM,CAACO,MAAD,CAAN,CAAeoF,UAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2aADJ,CANJ,EAUI,oBAAC,MAAD;AAAQ,IAAA,WAAW,EAAE,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVJ,EAWI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAACC,MAAAA,iBAAiB,EAAEC,IAAI,CAACC,KAAL,CAAWvF,MAAM,CAACwF,UAAP,GAAoB,EAA/B,CAApB;AAAwDC,MAAAA,SAAS,EAAE;AAAnE,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,WAAD;AACI,IAAA,KAAK,EAAE,SADX;AAEI,IAAA,KAAK,EAAE,eAFX;AAGI,IAAA,QAAQ,EAAEZ,cAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAXJ,CAFJ,CApDhB,EA8EI,oBAAC,iBAAD;AACI,IAAA,QAAQ,EAAExD,aADd;AAEI,IAAA,aAAa,EAAEqD,qBAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA9EJ,CADJ;AAqFH,CArPD;;AAyPA,eAAe7E,UAAf","sourcesContent":["//----IMPORTS----//\n//React\nimport React, {useEffect, useState, useContext} from 'react';\n//React native\nimport {View, Text, Image, AsyncStorage, ActivityIndicator, ImageBackground, StatusBar} from 'react-native';\n//Navigation Events\nimport {NavigationEvents} from 'react-navigation';\n//Context\nimport {Context as AppSettingsContext} from \"../context/AppSettingsContext\";\nimport {Context as AuthContext} from \"../context/AuthContext\";\n//Tab View\nimport {TabView, SceneMap, TabBar} from 'react-native-tab-view';\n//Componetns\nimport Header from \"../components/shared/Header\";\nimport {SafeView, DataLoadingIndicator, VerticalSpacer, Spacer} from \"../components/shared\";\nimport InitAppLoadingIndicator from \"../components/shared/InitAppLoadingIndicator\";\nimport {NetworkErrorModal} from \"../components/modals\";\nimport ProductsBlock from \"../components/menu/ProductsBlock\";\nimport NoContentBlock from \"../components/shared/NoContentBlock\";\n//React-native-vector-icons package\nimport {createIconSetFromIcoMoon} from 'react-native-vector-icons';\nimport icoMoonConfig from '../../selection.json';\n\n// logo\nimport logoImage from '../../assets/images/old-logo.png';\n\nconst IcoMoonIcon = createIconSetFromIcoMoon(icoMoonConfig, 'icomoon', 'icomoon.ttf');\n//Localization\nimport translator from \"../translator/translator\";\n//Helpers\nimport {prepareLanguageToHttpRequest} from \"../helpers/helpers\";\n//Global Vars\nimport {BASE_URL, APP_VERSION} from \"../different/global_vars\";\n//Api\nimport axiosWithErrorHandler from \"../services/axiosWithErrorHandler\";\n//Styles\nimport styles from '../styles/screens/menu-screen';\nimport {app_styles} from \"../styles/app_styles\";\nimport {ButtonOrder, ButtonPrimary} from \"../components/buttons\";\n\n\n//----COMPONENT----//\nconst MenuScreen = ({navigation}) => {\n    //Data and State\n    const {state: {scales, appSettings, screen_width, settingsNetworkError, language}, setLanguage, getAppSettings, clearSettingsNetworkError} = useContext(AppSettingsContext);\n    const {state: {user, networkError, unreadNotifications, isLoggedIn}, fetchUserByToken, getUserNotifications, clearNetworkError} = useContext(AuthContext);\n\n    const [index, setIndex] = useState(0);\n\n    const [isSettingsDataFetching, setIsSettingsDataFetched] = useState(true);\n    const [isDataFetching, setIsDataFetching] = useState(false);\n\n    const [fetchingError, setFetchingError] = useState(false);\n    const [categories, setCategories] = useState(false);\n    const [categoriesMeta, setCategoriesMeta] = useState({\n        language: null\n    });\n    const [routes, setRoutes] = useState([]);\n\n\n    //Hooks and Methods\n    useEffect(() => {\n        if(Object.keys(appSettings).length){\n            getCategories();\n        }\n    }, [appSettings, language])\n\n\n    const getCategories = async () => {\n        const language = language || await AsyncStorage.getItem('language');\n\n        if (categories.length && categoriesMeta.language === language) return;\n\n        setIsDataFetching(true);\n        try {\n            const lang = prepareLanguageToHttpRequest(language);\n            const url = `${BASE_URL}/product/categories?lang=${lang}&version=${APP_VERSION}&parent_id=0`;\n            const response = await axiosWithErrorHandler.get(url);\n            if (response) {\n                let categories = response.data.data;\n                if (categories.length) {\n                    let routes = [];\n                    categories.forEach(item => {\n                        routes.push({\n                            key: item.name,\n                            title: item.name,\n                            category: item,\n                            pizza_category_id: appSettings.pizzaCategoryId || 0,\n                            navigation,\n                            scales,\n                            language\n                        });\n                    });\n                    setRoutes(routes);\n                    setCategories(categories);\n                    setCategoriesMeta({language});\n                    setFetchingError(false);\n                    return categories;\n                } else {\n                    setFetchingError(false);\n                    setCategories(true);\n                }\n            }\n        } catch (error) {\n            setCategories(false);\n            setFetchingError(true);\n        } finally {\n            setIsDataFetching(false)\n        }\n    }\n\n    const getSceneMap = () => {\n        let sceneMap = {}\n\n        routes.map((item, index) => {\n            sceneMap[item.key] = ProductsBlock\n        })\n\n        return sceneMap\n    }\n\n    const initialLayout = {width: screen_width};\n\n    const renderScene = SceneMap(getSceneMap());\n\n    const renderTabBar = props => (\n        <TabBar\n            {...props}\n            indicatorStyle={{backgroundColor: app_styles(scales).colors.text.red}}\n            style={{backgroundColor: '#ffffff'}}\n            renderIcon={({route, focused, color}) => {\n                return <Image\n                    source={{uri: route.category.image}}\n                    style={styles(scales).menu_icon}\n                />\n            }}\n            renderLabel={({route, focused, color}) => {\n                return (\n                    <Text\n                        style={[styles(scales).label, {color: focused ? app_styles(scales).colors.text.primary : app_styles(scales).colors.text.black}]}>\n                        {route.title}\n                    </Text>\n                )\n            }}\n            scrollEnabled={true}\n            bounces={true}\n            tabStyle={styles(scales).tab}\n        />\n    );\n\n\n    const getUserByToken = async () => {\n        const token = await AsyncStorage.getItem('token');\n        if (token) {\n            await fetchUserByToken();\n            getUserNotifications();\n        }\n    }\n\n\n    const setAppSettings = async () => {\n        const language = await AsyncStorage.getItem('language');\n        language ? setLanguage(language, false) : setLanguage('ukrainian', false);\n        await getAppSettings();\n    }\n\n\n    const handleCloseErrorModal = () => {\n        if (fetchingError) {\n            return setFetchingError(false);\n        }\n    }\n\n\n    const handleFocus = async () => {\n        await startAppDataFetching();\n    }\n\n\n    const startAppDataFetching = async () => {\n        if (Object.keys(appSettings).length || Object.keys(user).length) return;\n        setIsSettingsDataFetched(true)\n        await setAppSettings();\n        await getUserByToken();\n        setIsSettingsDataFetched(false);\n    }\n\n\n    const handleTryAgain = async () => {\n        if (settingsNetworkError) {\n            clearSettingsNetworkError();\n        }\n\n        if (networkError) {\n            clearNetworkError();\n        }\n        setIsSettingsDataFetched(true);\n        await startAppDataFetching();\n        setIsSettingsDataFetched(false);\n    }\n\n\n    return (\n        <>\n            <NavigationEvents\n                onWillFocus={handleFocus}\n            />\n            {\n                !(settingsNetworkError || networkError)\n                    ? (\n                        !isSettingsDataFetching\n                            ? (\n                                <SafeView>\n                                    <Header\n                                        navigation={navigation}\n                                        exclamation\n                                        displayBell\n                                        isLogged={isLoggedIn}\n                                        unreadNotifications={unreadNotifications}\n                                    />\n                                    <View style={styles(scales).body}>\n                                        {\n                                            !fetchingError\n                                                ? (\n                                                    !isDataFetching\n                                                        ? (\n                                                            categories\n                                                                ? (\n                                                                    categories.length\n                                                                        ? <TabView\n                                                                            renderTabBar={renderTabBar}\n                                                                            navigationState={{index, routes}}\n                                                                            renderScene={renderScene}\n                                                                            onIndexChange={setIndex}\n                                                                            initialLayout={initialLayout}\n                                                                            lazy\n                                                                        />\n                                                                        : <NoContentBlock\n                                                                            title={translator.translate(language, \"Вибачте\")}\n                                                                            note={translator.translate(language, \"На даний момент меню не доступне\")}\n                                                                            navigation={navigation}\n                                                                        />\n                                                                )\n                                                                : null\n                                                        )\n                                                        : <DataLoadingIndicator/>\n                                                )\n                                                : null\n                                        }\n                                    </View>\n                                </SafeView>\n                            )\n                            : <InitAppLoadingIndicator/>\n                    )\n                    : (\n                        <>\n                            <StatusBar backgroundColor={app_styles(scales).colors.app.blue} barStyle=\"light-content\"/>\n                            <View style={styles(scales).error_container}>\n                                \n                                <Image source={logoImage} />\n                                <Spacer spaceHeight={40}/>\n                                <Text style={styles(scales).error_title}>OOOPPPSSS....</Text>\n                                <Spacer spaceHeight={15}/>\n                                <View>\n                                    <Text style={styles(scales).error_text}>Щось пішло не так... Сталася внутрішня помилка,\n                                        або відсутнє з'єднання з інтернетом.</Text>\n                                </View>\n                                <Spacer spaceHeight={30}/>\n                                <View style={{paddingHorizontal: Math.round(scales.widthScale * 50), alignSelf: 'stretch'}}>\n                                    <ButtonOrder\n                                        color={'#ED7225'}\n                                        title={\"Спробувати ще\"}\n                                        callback={handleTryAgain}\n                                    />\n                                </View>\n                            </View>\n                        </>\n                    )\n            }\n\n            {/* Network Error Modal */}\n            <NetworkErrorModal\n                isOpened={fetchingError}\n                closeCallback={handleCloseErrorModal}\n            />\n        </>\n    );\n}\n\n\n//----EXPORT----//\nexport default MenuScreen;\n"]},"metadata":{},"sourceType":"module"}