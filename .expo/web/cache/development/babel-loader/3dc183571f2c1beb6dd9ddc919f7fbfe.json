{"ast":null,"code":"var _jsxFileName = \"/home/alex/workspace/papamama/src/components/buttons/ButtonPrimary.js\";\nimport React, { useContext } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { createIconSetFromIcoMoon } from \"@expo/vector-icons\";\nimport icoMoonConfig from \"../../../selection.json\";\nvar IcoMoonIcon = createIconSetFromIcoMoon(icoMoonConfig, 'icomoon', 'icomoon.ttf');\nimport { Context as AppSettingsContext } from \"../../context/AppSettingsContext\";\nimport styles from \"../../styles/components/buttons/button-primary\";\nimport { app_styles } from \"../../styles/app_styles.js\";\n\nvar ButtonPrimary = function ButtonPrimary(_ref) {\n  var title = _ref.title,\n      callback = _ref.callback,\n      icon = _ref.icon,\n      iconName = _ref.iconName,\n      iconSize = _ref.iconSize,\n      color = _ref.color,\n      isDataLoading = _ref.isDataLoading,\n      _ref$leadToContacts = _ref.leadToContacts,\n      leadToContacts = _ref$leadToContacts === void 0 ? false : _ref$leadToContacts,\n      _ref$alignLeft = _ref.alignLeft,\n      alignLeft = _ref$alignLeft === void 0 ? false : _ref$alignLeft;\n\n  var _useContext = useContext(AppSettingsContext),\n      scales = _useContext.state.scales;\n\n  return React.createElement(React.Fragment, null, leadToContacts ? React.createElement(TouchableOpacity, {\n    style: [styles(scales).button, styles(scales).button_contacts, {\n      justifyContent: 'center'\n    }],\n    onPress: callback,\n    activeOpacity: .7,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 25\n    }\n  }, React.createElement(Text, {\n    style: styles(scales).title_contacts,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 29\n    }\n  }, title)) : React.createElement(TouchableOpacity, {\n    style: [styles(scales).button, {\n      backgroundColor: color,\n      justifyContent: alignLeft ? 'flex-start' : 'center',\n      paddingLeft: alignLeft ? Math.round(scales.widthScale * 60) : null\n    }],\n    onPress: callback,\n    activeOpacity: .7,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 25\n    }\n  }, isDataLoading ? React.createElement(ActivityIndicator, {\n    size: \"small\",\n    color: app_styles(scales).colors.app.white,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 39\n    }\n  }) : React.createElement(React.Fragment, null, icon ? React.createElement(View, {\n    style: styles(scales).icon_container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 57\n    }\n  }, React.createElement(IcoMoonIcon, {\n    name: iconName,\n    color: app_styles(scales).colors.app.white,\n    size: iconSize,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 61\n    }\n  })) : null, React.createElement(Text, {\n    style: styles(scales).title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 45\n    }\n  }, title))));\n};\n\nexport default ButtonPrimary;","map":{"version":3,"sources":["/home/alex/workspace/papamama/src/components/buttons/ButtonPrimary.js"],"names":["React","useContext","createIconSetFromIcoMoon","icoMoonConfig","IcoMoonIcon","Context","AppSettingsContext","styles","app_styles","ButtonPrimary","title","callback","icon","iconName","iconSize","color","isDataLoading","leadToContacts","alignLeft","scales","state","button","button_contacts","justifyContent","title_contacts","backgroundColor","paddingLeft","Math","round","widthScale","colors","app","white","icon_container"],"mappings":";AAEA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;;;;;AAIA,SAASC,wBAAT;AACA,OAAOC,aAAP;AACA,IAAMC,WAAW,GAAGF,wBAAwB,CAACC,aAAD,EAAgB,SAAhB,EAA2B,aAA3B,CAA5C;AAEA,SAASE,OAAO,IAAIC,kBAApB;AAEA,OAAOC,MAAP;AACA,SAASC,UAAT;;AAMA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,OAAoH;AAAA,MAAjHC,KAAiH,QAAjHA,KAAiH;AAAA,MAA1GC,QAA0G,QAA1GA,QAA0G;AAAA,MAAhGC,IAAgG,QAAhGA,IAAgG;AAAA,MAA1FC,QAA0F,QAA1FA,QAA0F;AAAA,MAAhFC,QAAgF,QAAhFA,QAAgF;AAAA,MAAtEC,KAAsE,QAAtEA,KAAsE;AAAA,MAA/DC,aAA+D,QAA/DA,aAA+D;AAAA,iCAAhDC,cAAgD;AAAA,MAAhDA,cAAgD,oCAA/B,KAA+B;AAAA,4BAAxBC,SAAwB;AAAA,MAAxBA,SAAwB,+BAAZ,KAAY;;AAAA,oBAExGjB,UAAU,CAACK,kBAAD,CAF8F;AAAA,MAErHa,MAFqH,eAE9HC,KAF8H,CAErHD,MAFqH;;AAKtI,SACI,0CAEQF,cAAc,GAEN,oBAAC,gBAAD;AAAkB,IAAA,KAAK,EAAE,CAACV,MAAM,CAACY,MAAD,CAAN,CAAeE,MAAhB,EAAwBd,MAAM,CAACY,MAAD,CAAN,CAAeG,eAAvC,EAAwD;AAACC,MAAAA,cAAc,EAAE;AAAjB,KAAxD,CAAzB;AAA8G,IAAA,OAAO,EAAEZ,QAAvH;AAAiI,IAAA,aAAa,EAAE,EAAhJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEJ,MAAM,CAACY,MAAD,CAAN,CAAeK,cAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6Cd,KAA7C,CADJ,CAFM,GAON,oBAAC,gBAAD;AAAkB,IAAA,KAAK,EAAE,CAACH,MAAM,CAACY,MAAD,CAAN,CAAeE,MAAhB,EAAwB;AAAEI,MAAAA,eAAe,EAAEV,KAAnB;AAA0BQ,MAAAA,cAAc,EAAEL,SAAS,GAAG,YAAH,GAAkB,QAArE;AAA+EQ,MAAAA,WAAW,EAAER,SAAS,GAAGS,IAAI,CAACC,KAAL,CAAWT,MAAM,CAACU,UAAP,GAAoB,EAA/B,CAAH,GAAwC;AAA7I,KAAxB,CAAzB;AAAsM,IAAA,OAAO,EAAElB,QAA/M;AAAyN,IAAA,aAAa,EAAE,EAAxO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQK,aAAa,GACP,oBAAC,iBAAD;AAAmB,IAAA,IAAI,EAAC,OAAxB;AAAgC,IAAA,KAAK,EAAER,UAAU,CAACW,MAAD,CAAV,CAAmBW,MAAnB,CAA0BC,GAA1B,CAA8BC,KAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADO,GAIL,0CAEQpB,IAAI,GAEI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEL,MAAM,CAACY,MAAD,CAAN,CAAec,cAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,WAAD;AACI,IAAA,IAAI,EAAEpB,QADV;AAEI,IAAA,KAAK,EAAEL,UAAU,CAACW,MAAD,CAAV,CAAmBW,MAAnB,CAA0BC,GAA1B,CAA8BC,KAFzC;AAGI,IAAA,IAAI,EAAElB,QAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAFJ,GAUE,IAZd,EAcI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEP,MAAM,CAACY,MAAD,CAAN,CAAeT,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoCA,KAApC,CAdJ,CANhB,CAThB,CADJ;AAuCH,CA5CD;;AAkDA,eAAeD,aAAf","sourcesContent":["//----IMPORTS----//\n//React\nimport React, { useContext } from 'react';\n//React native\nimport { View, Text, TouchableOpacity, ActivityIndicator } from 'react-native';\n//React-native-vector-icons package\nimport { createIconSetFromIcoMoon } from 'react-native-vector-icons';\nimport icoMoonConfig from '../../../selection.json';\nconst IcoMoonIcon = createIconSetFromIcoMoon(icoMoonConfig, 'icomoon', 'icomoon.ttf');\n//Context\nimport { Context as AppSettingsContext } from \"../../context/AppSettingsContext\";\n//Styles\nimport styles from \"../../styles/components/buttons/button-primary\";\nimport { app_styles } from '../../styles/app_styles.js';\n\n\n\n\n//----COMPONENT----//\nconst ButtonPrimary = ({ title, callback, icon, iconName, iconSize, color, isDataLoading, leadToContacts = false, alignLeft = false }) => {\n    //Data and State\n    const { state: { scales } } = useContext(AppSettingsContext);\n\n    //Template\n    return (\n        <>\n            {\n                leadToContacts\n                    ? (\n                        <TouchableOpacity style={[styles(scales).button, styles(scales).button_contacts, {justifyContent: 'center'}]} onPress={callback} activeOpacity={.7}>\n                            <Text style={styles(scales).title_contacts}>{title}</Text>\n                        </TouchableOpacity>\n                    )\n                    : (\n                        <TouchableOpacity style={[styles(scales).button, { backgroundColor: color, justifyContent: alignLeft ? 'flex-start' : 'center', paddingLeft: alignLeft ? Math.round(scales.widthScale * 60) : null}]} onPress={callback} activeOpacity={.7}>\n                            {\n                                isDataLoading\n                                    ? <ActivityIndicator size=\"small\" color={app_styles(scales).colors.app.white\n                                    } />\n                                    : (\n                                        <>\n                                            {\n                                                icon\n                                                    ? (\n                                                        <View style={styles(scales).icon_container}>\n                                                            <IcoMoonIcon\n                                                                name={iconName}\n                                                                color={app_styles(scales).colors.app.white}\n                                                                size={iconSize}\n                                                            />\n                                                        </View>\n                                                    )\n                                                    : null\n                                            }\n                                            <Text style={styles(scales).title}>{title}</Text>\n                                        </>\n                                    )\n                            }\n                        </TouchableOpacity >\n                    )\n            }\n        </>\n    );\n}\n\n\n\n\n//----EXPORT----//\nexport default ButtonPrimary;"]},"metadata":{},"sourceType":"module"}