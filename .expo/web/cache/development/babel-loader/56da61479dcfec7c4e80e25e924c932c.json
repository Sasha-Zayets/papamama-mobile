{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\n\nvar prepareLanguageToHttpRequest = function prepareLanguageToHttpRequest(language) {\n  switch (language) {\n    case \"english\":\n      return \"en\";\n\n    case \"russian\":\n      return \"ru\";\n\n    default:\n      return \"uk\";\n  }\n};\n\nvar reformatUserPhone = function reformatUserPhone(value) {\n  var cleanedPhone = value.replace(/[^0-9]+/g, '');\n  var formatedNumber = \"+\" + cleanedPhone.substring(0, 3) + \" \" + cleanedPhone.substring(3, 5) + \" \" + cleanedPhone.substring(5, 8) + \" \" + cleanedPhone.substring(8, 10) + \" \" + cleanedPhone.substring(10, 12);\n  return formatedNumber;\n};\n\nvar formatPrice = function formatPrice(language, price) {\n  var priceTransformed = Number(price).toFixed(2);\n\n  switch (language) {\n    case 'english':\n      return priceTransformed.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n\n    default:\n      return priceTransformed.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1 ');\n  }\n};\n\nvar checkIfDate = function checkIfDate(value) {\n  return !isNaN(Date.parse(value));\n};\n\nvar checkAuth = function checkAuth() {\n  var token;\n  return _regeneratorRuntime.async(function checkAuth$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem('token'));\n\n        case 2:\n          token = _context.sent;\n          return _context.abrupt(\"return\", token || null);\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nfunction getUniqueId() {\n  if (typeof getUniqueId.increment === 'undefined') {\n    getUniqueId.increment = 0;\n  }\n\n  return ++getUniqueId.increment;\n}\n\nvar makeCopy = function makeCopy(data) {\n  return JSON.parse(JSON.stringify(data));\n};\n\nfunction escapeHtml(string) {\n  return string.replace(/&lt;/gi, \"<\").replace(/&gt;/gi, \">\").replace(/&quot;/gi, \"\\\"\").replace(/&#39;/gi, \"'\").replace(/&nbsp;/gi, \"\").replace(/&rsquo;/gi, \"'\");\n}\n\nvar notEmptyString = function notEmptyString(str) {\n  return !!(str && str.trim());\n};\n\nexport { prepareLanguageToHttpRequest, formatPrice, reformatUserPhone, checkIfDate, checkAuth, getUniqueId, escapeHtml, makeCopy, notEmptyString };","map":{"version":3,"sources":["/home/alex/workspace/papamama/src/helpers/helpers.js"],"names":["prepareLanguageToHttpRequest","language","reformatUserPhone","value","cleanedPhone","replace","formatedNumber","substring","formatPrice","price","priceTransformed","Number","toFixed","checkIfDate","isNaN","Date","parse","checkAuth","AsyncStorage","getItem","token","getUniqueId","increment","makeCopy","data","JSON","stringify","escapeHtml","string","notEmptyString","str","trim"],"mappings":"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","sourcesContent":["import { AsyncStorage } from \"react-native\";\n\n\nconst prepareLanguageToHttpRequest = (language) => {\n    switch (language) {\n        case \"english\":\n            return \"en\";\n        case \"russian\":\n            return \"ru\";\n        default:\n            return \"uk\"\n    }\n}\n\nconst reformatUserPhone = (value) => {\n    let cleanedPhone = value.replace(/[^0-9]+/g, '');\n    let formatedNumber = \"+\" + cleanedPhone.substring(0, 3) + \" \" + cleanedPhone.substring(3, 5) + \" \" + cleanedPhone.substring(5, 8) + \" \" + cleanedPhone.substring(8, 10) + \" \" + cleanedPhone.substring(10, 12);\n    return formatedNumber;\n}\n\n/**\n* Format price to locale\n*/\nconst formatPrice = (language, price) => {\n    let priceTransformed = Number(price).toFixed(2);\n\n    switch (language) {\n        case 'english':\n            return priceTransformed.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n        default:\n            return priceTransformed.replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1 ');\n    }\n}\n\nconst checkIfDate = (value) => {\n    return !isNaN(Date.parse(value));\n}\n\n\nconst checkAuth = async () => {\n    const token = await AsyncStorage.getItem('token');\n    return token || null;\n}\n\n\nfunction getUniqueId() {\n    if (typeof getUniqueId.increment === 'undefined') {\n        getUniqueId.increment = 0;\n    }\n    return ++getUniqueId.increment;\n}\n\n\nconst makeCopy = data => JSON.parse(JSON.stringify(data))\n\n\nfunction escapeHtml(string) {\n    return string\n         .replace(/&lt;/gi, \"<\")\n         .replace(/&gt;/gi, \">\")\n         .replace(/&quot;/gi, \"\\\"\")\n         .replace(/&#39;/gi, \"'\")\n         .replace(/&nbsp;/gi, \"\")\n         .replace(/&rsquo;/gi, \"'\");\n }\n\nconst notEmptyString = (str) => {\n    return !!(str && str.trim())\n}\n\nexport { prepareLanguageToHttpRequest, formatPrice, reformatUserPhone, checkIfDate, checkAuth, getUniqueId, escapeHtml, makeCopy, notEmptyString };"]},"metadata":{},"sourceType":"module"}