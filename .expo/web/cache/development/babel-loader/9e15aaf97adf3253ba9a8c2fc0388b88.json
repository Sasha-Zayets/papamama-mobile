{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/alex/workspace/papamama/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport { AppLoading } from 'expo';\nimport * as Font from \"expo-font\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport App from \"./src/navigation/AppNavigation\";\nexport default function Application() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoadingComplete = _useState2[0],\n      setLoadingComplete = _useState2[1];\n\n  var loadResourcesAsync = function loadResourcesAsync() {\n    return _regeneratorRuntime.async(function loadResourcesAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Promise.all([Font.loadAsync(_objectSpread({\n              'icomoon': require(\"./assets/fonts/icomoon.ttf\"),\n              'roboto-bold': require(\"./assets/fonts/Roboto-Bold.ttf\"),\n              'roboto-medium': require(\"./assets/fonts/Roboto-Medium.ttf\"),\n              'roboto-regular': require(\"./assets/fonts/Roboto-Regular.ttf\"),\n              'roboto-black': require(\"./assets/fonts/Roboto-Black.ttf\"),\n              'montserrat-semi-bold': require(\"./assets/fonts/Montserrat-SemiBold.ttf\"),\n              'montserrat-medium': require(\"./assets/fonts/Montserrat-Medium.ttf\"),\n              'montserrat-light': require(\"./assets/fonts/Montserrat-Light.ttf\"),\n              'montserrat-regular': require(\"./assets/fonts/Montserrat-Regular.ttf\")\n            }, Ionicons.font))]));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handleLoadingError = function handleLoadingError(error, setLoadingFailed) {\n    setLoadingFailed(true);\n  };\n\n  var handleFinishLoading = function handleFinishLoading(setLoadingComplete) {\n    setLoadingComplete(true);\n  };\n\n  if (isLoadingComplete) {\n    return React.createElement(App, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 12\n      }\n    });\n  } else {\n    return React.createElement(AppLoading, {\n      startAsync: loadResourcesAsync,\n      onError: handleLoadingError,\n      onFinish: function onFinish() {\n        return handleFinishLoading(setLoadingComplete);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    });\n  }\n}","map":{"version":3,"sources":["/home/alex/workspace/papamama/App.js"],"names":["React","useState","AppLoading","Font","Ionicons","App","Application","isLoadingComplete","setLoadingComplete","loadResourcesAsync","Promise","all","loadAsync","require","font","handleLoadingError","error","setLoadingFailed","handleFinishLoading"],"mappings":";;;;;;;;;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,SAASC,UAAT,QAA2B,MAA3B;AAEA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AAEA,OAAOC,GAAP;AAIA,eAAe,SAASC,WAAT,GAAuB;AAAA,kBAEYL,QAAQ,CAAC,KAAD,CAFpB;AAAA;AAAA,MAE7BM,iBAF6B;AAAA,MAEVC,kBAFU;;AAKpC,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACnBC,OAAO,CAACC,GAAR,CAAY,CAChBR,IAAI,CAACS,SAAL;AACE,yBAAWC,OAAO,8BADpB;AAEE,6BAAeA,OAAO,kCAFxB;AAGE,+BAAiBA,OAAO,oCAH1B;AAIE,gCAAkBA,OAAO,qCAJ3B;AAKE,8BAAgBA,OAAO,mCALzB;AAME,sCAAwBA,OAAO,0CANjC;AAOE,mCAAqBA,OAAO,wCAP9B;AAQE,kCAAoBA,OAAO,uCAR7B;AASE,oCAAsBA,OAAO;AAT/B,eAUKT,QAAQ,CAACU,IAVd,EADgB,CAAZ,CADmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3B;;AAiBA,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,KAAD,EAAQC,gBAAR,EAA6B;AACtDA,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD,GAFD;;AAIA,MAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAV,kBAAkB,EAAI;AAChDA,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD,GAFD;;AAMA,MAAID,iBAAJ,EAAuB;AACrB,WAAO,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAFD,MAEO;AACL,WACE,oBAAC,UAAD;AACE,MAAA,UAAU,EAAEE,kBADd;AAEE,MAAA,OAAO,EAAEM,kBAFX;AAGE,MAAA,QAAQ,EAAE;AAAA,eAAMG,mBAAmB,CAACV,kBAAD,CAAzB;AAAA,OAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAOD;AAEF","sourcesContent":["//React\nimport React, { useState } from 'react';\n//Expo\nimport { AppLoading } from 'expo';\n//Fonts\nimport * as Font from \"expo-font\";\nimport { Ionicons } from \"@expo/vector-icons\";\n//Navigation\nimport App from './src/navigation/AppNavigation';\n\n\n//Component\nexport default function Application() {\n  /*--DATA--*/\n  const [isLoadingComplete, setLoadingComplete] = useState(false);\n\n  /*--METHODS--*/\n  const loadResourcesAsync = async () => {\n    await Promise.all([\n      Font.loadAsync({\n        'icomoon': require(\"./assets/fonts/icomoon.ttf\"),\n        'roboto-bold': require(\"./assets/fonts/Roboto-Bold.ttf\"),\n        'roboto-medium': require(\"./assets/fonts/Roboto-Medium.ttf\"),\n        'roboto-regular': require(\"./assets/fonts/Roboto-Regular.ttf\"),\n        'roboto-black': require(\"./assets/fonts/Roboto-Black.ttf\"),\n        'montserrat-semi-bold': require(\"./assets/fonts/Montserrat-SemiBold.ttf\"),\n        'montserrat-medium': require(\"./assets/fonts/Montserrat-Medium.ttf\"),\n        'montserrat-light': require(\"./assets/fonts/Montserrat-Light.ttf\"),\n        'montserrat-regular': require(\"./assets/fonts/Montserrat-Regular.ttf\"),\n        ...Ionicons.font\n      }),\n    ]);\n  }\n\n  const handleLoadingError = (error, setLoadingFailed) => {\n    setLoadingFailed(true)\n  }\n\n  const handleFinishLoading = setLoadingComplete => {\n    setLoadingComplete(true);\n  }\n\n\n  /*--TEMPLATE--*/\n  if (isLoadingComplete) {\n    return <App  />;\n  } else {\n    return (\n      <AppLoading\n        startAsync={loadResourcesAsync}\n        onError={handleLoadingError}\n        onFinish={() => handleFinishLoading(setLoadingComplete)}\n      />\n    );\n  }\n\n}\n\n\n"]},"metadata":{},"sourceType":"module"}