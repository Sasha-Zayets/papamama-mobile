{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport createDataContext from \"./createDataContext\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Notifications } from 'expo';\nimport * as Permissions from 'expo-permissions';\nimport Constants from 'expo-constants';\nimport { navigate } from \"../_navigationRefs\";\nimport axiosWithToken from \"../services/axiosWithToken\";\nimport axiosWithErrorHandler from \"../services/axiosWithErrorHandler\";\nimport { prepareLanguageToHttpRequest } from \"../helpers/helpers\";\nimport { BASE_URL, APP_VERSION } from \"../different/global_vars\";\n\nvar authReducer = function authReducer(state, action) {\n  switch (action.type) {\n    case 'login':\n      var redirectable = action.payload.redirectable;\n\n      if (redirectable) {\n        navigate(state.fromMakeOrder ? 'MakeOrder' : 'AppMenu');\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: action.payload.user,\n        isLoggedIn: true,\n        networkError: false,\n        validationErrors: {},\n        isDataLoading: false,\n        fromMakeOrder: false\n      });\n\n    case 'updateUserInfo':\n      navigate('AppMenu');\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: action.payload.user,\n        networkError: false,\n        isDataFetching: false,\n        validationErrors: {},\n        isLoggedIn: true,\n        fromMakeOrder: false\n      });\n\n    case 'logout':\n      var newOrdersHistoryMeta = {\n        language: null\n      };\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: {},\n        isLoggedIn: false,\n        last_order_address: {},\n        ordersHistory: [],\n        ordersHistoryMetaData: newOrdersHistoryMeta\n      });\n\n    case 'setNotifications':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        notifications: action.payload.notifications,\n        unreadNotifications: action.payload.unread\n      });\n\n    case 'getNotification':\n      var needle;\n      var newNotifications = state.notifications.map(function (item) {\n        if (item.id === action.payload.id) {\n          item.read = 1;\n          needle = item;\n        }\n\n        return item;\n      });\n      var newUnred = action.payload.decrase ? state.unreadNotifications - 1 : state.unreadNotifications;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        notification: needle,\n        notifications: newNotifications,\n        unreadNotifications: newUnred\n      });\n\n    case 'clearNotification':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        notification: null\n      });\n\n    case 'updateUser':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, _defineProperty({}, action.payload.field, action.payload.value))\n      });\n\n    case 'updateNotificationsSettings':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), action.payload),\n        isDataFetching: false,\n        networkError: false\n      });\n\n    case 'writeOffBonuses':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          bonuses: 0\n        })\n      });\n\n    case 'setFromMakeOrder':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        fromMakeOrder: action.payload\n      });\n\n    case 'setLastOrderAddress':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        last_order_address: action.payload\n      });\n\n    case 'setCustomerData':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        customerData: _objectSpread(_objectSpread({}, state.customerData), {}, _defineProperty({}, action.payload.field, action.payload.value))\n      });\n\n    case 'clearNetworkError':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        networkError: false,\n        isDataFetching: false,\n        isOrdersHistoryRefreshing: false\n      });\n\n    case 'setDeviceId':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          device_id: action.payload\n        })\n      });\n\n    case 'setNetworkError':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        networkError: action.payload,\n        isDataFetching: false,\n        isOrdersHistoryRefreshing: false\n      });\n\n    case 'setIsMoreDataLoading':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isMoreDataLoading: true\n      });\n\n    case 'setIsDataFetching':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isDataFetching: true\n      });\n\n    case 'setValidationErrors':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        validationErrors: action.payload,\n        networkError: false,\n        isDataFetching: false,\n        isDataLoading: false\n      });\n\n    case 'clearValidationErrors':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        validationErrors: _objectSpread(_objectSpread({}, state.validationErrors), {}, _defineProperty({}, action.payload, null))\n      });\n\n    case 'clearAllValidationsErrors':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        validationErrors: {}\n      });\n\n    default:\n      return _objectSpread({}, state);\n  }\n};\n\nvar clearNetworkError = function clearNetworkError(dispatch) {\n  return function () {\n    dispatch({\n      type: 'clearNetworkError'\n    });\n  };\n};\n\nvar setNetworkError = function setNetworkError(dispatch) {\n  return function () {\n    dispatch({\n      type: 'setNetworkError',\n      payload: 'An error occured'\n    });\n  };\n};\n\nvar clearValidationErrors = function clearValidationErrors(dispatch) {\n  return function (field) {\n    dispatch({\n      type: 'clearValidationErrors',\n      payload: field\n    });\n  };\n};\n\nvar setValidationErrors = function setValidationErrors(dispatch) {\n  return function (errors) {\n    dispatch({\n      type: 'setValidationErrors',\n      payload: errors\n    });\n  };\n};\n\nvar setCustomerData = function setCustomerData(dispatch) {\n  return function (field, value) {\n    dispatch({\n      type: 'setCustomerData',\n      payload: {\n        field: field,\n        value: value\n      }\n    });\n  };\n};\n\nvar login = function login(dispatch) {\n  return function _callee(formData) {\n    var language, lang, url, response, error;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('language'));\n\n          case 3:\n            language = _context.sent;\n            lang = prepareLanguageToHttpRequest(language);\n            url = BASE_URL + \"/user/login?lang=\" + lang + \"&version=\" + APP_VERSION;\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(axiosWithErrorHandler.post(url, formData));\n\n          case 8:\n            response = _context.sent;\n\n            if (!response) {\n              _context.next = 12;\n              break;\n            }\n\n            _context.next = 12;\n            return _regeneratorRuntime.awrap(authHandler(response, dispatch, 'login'));\n\n          case 12:\n            _context.next = 18;\n            break;\n\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](0);\n\n            if (_context.t0 && _context.t0.response && _context.t0.response.data && _context.t0.response.data.message) {\n              error = _context.t0.response.data.message;\n              dispatch({\n                type: 'setValidationErrors',\n                payload: {\n                  password: error\n                }\n              });\n            } else {\n              dispatch({\n                type: 'setNetworkError',\n                payload: true\n              });\n            }\n\n            throw new Error('Login failed');\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 14]], Promise);\n  };\n};\n\nvar changePassword = function changePassword(dispatch) {\n  return function _callee2(formData) {\n    var language, lang, url, response, message, errors;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('language'));\n\n          case 3:\n            language = _context2.sent;\n            lang = prepareLanguageToHttpRequest(language);\n            url = BASE_URL + \"/user/change-password?lang=\" + lang + \"&version=\" + APP_VERSION;\n            _context2.next = 8;\n            return _regeneratorRuntime.awrap(axiosWithToken.post(url, formData));\n\n          case 8:\n            response = _context2.sent;\n\n            if (!(response && response.data && response.data.message)) {\n              _context2.next = 12;\n              break;\n            }\n\n            message = response.data.message;\n            return _context2.abrupt(\"return\", message);\n\n          case 12:\n            throw new Error('Password change failed');\n\n          case 15:\n            _context2.prev = 15;\n            _context2.t0 = _context2[\"catch\"](0);\n\n            if (_context2.t0 && _context2.t0.response && _context2.t0.response.data && _context2.t0.response.data.errors) {\n              errors = _context2.t0.response.data.errors;\n              dispatch({\n                type: 'setValidationErrors',\n                payload: errors\n              });\n            } else {\n              dispatch({\n                type: 'setNetworkError',\n                payload: true\n              });\n            }\n\n            throw new Error('Password change failed');\n\n          case 19:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 15]], Promise);\n  };\n};\n\nvar requestPasswordReset = function requestPasswordReset(dispatch) {\n  return function _callee3(formData) {\n    var language, lang, url, response, message, errors;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('language'));\n\n          case 3:\n            language = _context3.sent;\n            lang = prepareLanguageToHttpRequest(language);\n            url = BASE_URL + \"/user/request-password-reset?lang=\" + lang + \"&version=\" + APP_VERSION;\n            _context3.next = 8;\n            return _regeneratorRuntime.awrap(axiosWithToken.post(url, formData));\n\n          case 8:\n            response = _context3.sent;\n\n            if (!(response && response.data && response.data.message)) {\n              _context3.next = 12;\n              break;\n            }\n\n            message = response.data.message;\n            return _context3.abrupt(\"return\", message);\n\n          case 12:\n            throw new Error('Request reset password failed');\n\n          case 15:\n            _context3.prev = 15;\n            _context3.t0 = _context3[\"catch\"](0);\n\n            if (_context3.t0 && _context3.t0.response && _context3.t0.response.data && _context3.t0.response.data.errors) {\n              errors = _context3.t0.response.data.errors;\n              dispatch({\n                type: 'setValidationErrors',\n                payload: errors\n              });\n            } else {\n              dispatch({\n                type: 'setNetworkError',\n                payload: true\n              });\n            }\n\n            throw new Error('Request reset password failed');\n\n          case 19:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 15]], Promise);\n  };\n};\n\nvar registerUser = function registerUser(dispatch) {\n  return function _callee4(formData) {\n    var language, lang, url, response, errors;\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            _context4.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('language'));\n\n          case 3:\n            language = _context4.sent;\n            lang = prepareLanguageToHttpRequest(language);\n            url = BASE_URL + \"/user/signup?lang=\" + lang + \"&version=\" + APP_VERSION;\n            _context4.next = 8;\n            return _regeneratorRuntime.awrap(axiosWithErrorHandler.post(url, formData));\n\n          case 8:\n            response = _context4.sent;\n\n            if (!response) {\n              _context4.next = 12;\n              break;\n            }\n\n            _context4.next = 12;\n            return _regeneratorRuntime.awrap(authHandler(response, dispatch, 'login'));\n\n          case 12:\n            _context4.next = 18;\n            break;\n\n          case 14:\n            _context4.prev = 14;\n            _context4.t0 = _context4[\"catch\"](0);\n\n            if (_context4.t0 && _context4.t0.response && _context4.t0.response.data && _context4.t0.response.data.errors) {\n              errors = _context4.t0.response.data.errors;\n              dispatch({\n                type: 'setValidationErrors',\n                payload: errors\n              });\n            } else {\n              dispatch({\n                type: 'setNetworkError',\n                payload: true\n              });\n            }\n\n            throw new Error('Login failed');\n\n          case 18:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, [[0, 14]], Promise);\n  };\n};\n\nvar facebookLogin = function facebookLogin(dispatch) {\n  return function _callee5(data) {\n    var language, lang, url, response;\n    return _regeneratorRuntime.async(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.prev = 0;\n            _context5.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('language'));\n\n          case 3:\n            language = _context5.sent;\n            lang = prepareLanguageToHttpRequest(language);\n            url = BASE_URL + \"/user/login?lang=\" + lang + \"&version=\" + APP_VERSION;\n            _context5.next = 8;\n            return _regeneratorRuntime.awrap(axiosWithErrorHandler.post(url, data));\n\n          case 8:\n            response = _context5.sent;\n\n            if (!response) {\n              _context5.next = 12;\n              break;\n            }\n\n            _context5.next = 12;\n            return _regeneratorRuntime.awrap(authHandler(response, dispatch, 'login'));\n\n          case 12:\n            _context5.next = 17;\n            break;\n\n          case 14:\n            _context5.prev = 14;\n            _context5.t0 = _context5[\"catch\"](0);\n            throw new Error(_context5.t0.response.data.message);\n\n          case 17:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, [[0, 14]], Promise);\n  };\n};\n\nvar updateProfile = function updateProfile(dispatch) {\n  return function _callee6(formData) {\n    var language, lang, url, response, errors;\n    return _regeneratorRuntime.async(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.prev = 0;\n            _context6.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('language'));\n\n          case 3:\n            language = _context6.sent;\n            lang = prepareLanguageToHttpRequest(language);\n            url = BASE_URL + \"/user/settings?lang=\" + lang + \"&version=\" + APP_VERSION;\n            _context6.next = 8;\n            return _regeneratorRuntime.awrap(axiosWithToken.post(url, formData));\n\n          case 8:\n            response = _context6.sent;\n\n            if (response) {\n              authHandler(response, dispatch, 'updateUserInfo');\n            }\n\n            _context6.next = 16;\n            break;\n\n          case 12:\n            _context6.prev = 12;\n            _context6.t0 = _context6[\"catch\"](0);\n\n            if (_context6.t0 && _context6.t0.response && _context6.t0.response.data && _context6.t0.response.data.errors) {\n              errors = _context6.t0.response.data.errors;\n              dispatch({\n                type: 'setValidationErrors',\n                payload: errors\n              });\n            } else {\n              dispatch({\n                type: 'setNetworkError',\n                payload: true\n              });\n            }\n\n            throw new Error('Edit data failed');\n\n          case 16:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, [[0, 12]], Promise);\n  };\n};\n\nvar logout = function logout(dispatch) {\n  return function _callee7() {\n    return _regeneratorRuntime.async(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.removeItem('token'));\n\n          case 2:\n            dispatch({\n              type: 'logout'\n            });\n            navigate('Menu');\n\n          case 4:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar updateNotificationsSettings = function updateNotificationsSettings(dispatch) {\n  return function _callee8(formData, notifications) {\n    var language, lang, url, response;\n    return _regeneratorRuntime.async(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.prev = 0;\n            dispatch({\n              type: 'setIsDataFetching'\n            });\n            _context8.next = 4;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('language'));\n\n          case 4:\n            language = _context8.sent;\n            lang = prepareLanguageToHttpRequest(language);\n            url = BASE_URL + \"/user/notifications?lang=\" + lang + \"&version=\" + APP_VERSION;\n            _context8.next = 9;\n            return _regeneratorRuntime.awrap(axiosWithToken.post(url, formData));\n\n          case 9:\n            response = _context8.sent;\n\n            if (response) {\n              dispatch({\n                type: 'updateNotificationsSettings',\n                payload: notifications\n              });\n            }\n\n            _context8.next = 16;\n            break;\n\n          case 13:\n            _context8.prev = 13;\n            _context8.t0 = _context8[\"catch\"](0);\n            dispatch({\n              type: 'setNetworkError',\n              payload: true\n            });\n\n          case 16:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, null, null, [[0, 13]], Promise);\n  };\n};\n\nvar getLastOrderAddress = function getLastOrderAddress(dispatch) {\n  var language, lang, url;\n  return _regeneratorRuntime.async(function getLastOrderAddress$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          _context9.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem('language'));\n\n        case 3:\n          language = _context9.sent;\n          lang = prepareLanguageToHttpRequest(language);\n          url = BASE_URL + \"/user/last-order?lang=\" + lang + \"&version=\" + APP_VERSION;\n          axiosWithToken.get(url).then(function (response) {\n            if (response && response.data && response.data.data) {\n              var address = response.data.data;\n              if (Array.isArray(address)) return;\n\n              if (address) {\n                dispatch({\n                  type: 'setLastOrderAddress',\n                  payload: address\n                });\n              }\n            }\n          }).catch(function (error) {});\n          _context9.next = 11;\n          break;\n\n        case 9:\n          _context9.prev = 9;\n          _context9.t0 = _context9[\"catch\"](0);\n\n        case 11:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, null, null, [[0, 9]], Promise);\n};\n\nvar updateLastOrderAddress = function updateLastOrderAddress(dispatch) {\n  return function (address) {\n    dispatch({\n      type: 'setLastOrderAddress',\n      payload: address\n    });\n  };\n};\n\nvar fetchUserByToken = function fetchUserByToken(dispatch) {\n  return function _callee9() {\n    var language, lang, url, response;\n    return _regeneratorRuntime.async(function _callee9$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            _context10.prev = 0;\n            _context10.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('language'));\n\n          case 3:\n            language = _context10.sent;\n            lang = prepareLanguageToHttpRequest(language);\n            url = BASE_URL + \"/user/settings?lang=\" + lang + \"&version=\" + APP_VERSION;\n            _context10.next = 8;\n            return _regeneratorRuntime.awrap(axiosWithToken.get(url, {\n              timeout: 5000\n            }));\n\n          case 8:\n            response = _context10.sent;\n\n            if (response) {\n              authHandler(response, dispatch, 'login', false);\n            }\n\n            _context10.next = 15;\n            break;\n\n          case 12:\n            _context10.prev = 12;\n            _context10.t0 = _context10[\"catch\"](0);\n            dispatch({\n              type: 'setNetworkError',\n              payload: true\n            });\n\n          case 15:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, null, null, [[0, 12]], Promise);\n  };\n};\n\nvar authHandler = function authHandler(response, dispatch, dispatchAction) {\n  var redirectable,\n      token,\n      user,\n      _args11 = arguments;\n  return _regeneratorRuntime.async(function authHandler$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          redirectable = _args11.length > 3 && _args11[3] !== undefined ? _args11[3] : true;\n\n          if (!response) {\n            _context11.next = 17;\n            break;\n          }\n\n          _context11.prev = 2;\n\n          if (dispatchAction === 'updateUserInfo') {\n            token = response.data && response.data.user && response.data.user.auth_key ? response.data.user.auth_key : null;\n          } else {\n            token = response.data && response.data.data && response.data.data.auth_key ? response.data.data.auth_key : null;\n          }\n\n          if (!token) {\n            _context11.next = 7;\n            break;\n          }\n\n          _context11.next = 7;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem('token', token));\n\n        case 7:\n          user = response.data.data || response.data.user;\n          _context11.next = 10;\n          return _regeneratorRuntime.awrap(handleNotifications(dispatch));\n\n        case 10:\n          getLastOrderAddress(dispatch);\n          dispatch({\n            type: dispatchAction,\n            payload: {\n              user: user,\n              redirectable: redirectable\n            }\n          });\n          _context11.next = 17;\n          break;\n\n        case 14:\n          _context11.prev = 14;\n          _context11.t0 = _context11[\"catch\"](2);\n          throw _context11.t0;\n\n        case 17:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, null, null, [[2, 14]], Promise);\n};\n\nvar clearAllValidationsErrors = function clearAllValidationsErrors(dispatch) {\n  return function () {\n    dispatch({\n      type: 'clearAllValidationsErrors'\n    });\n  };\n};\n\nvar handleNotifications = function handleNotifications(dispatch) {\n  var language, lang, url;\n  return _regeneratorRuntime.async(function handleNotifications$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.prev = 0;\n          _context12.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem('language'));\n\n        case 3:\n          language = _context12.sent;\n          lang = prepareLanguageToHttpRequest(language);\n          url = BASE_URL + \"/user/set-device?lang=\" + lang + \"&version=\" + APP_VERSION;\n          _context12.next = 8;\n          return _regeneratorRuntime.awrap(registerForPushNotificationsAsync(url, dispatch));\n\n        case 8:\n          _context12.next = 13;\n          break;\n\n        case 10:\n          _context12.prev = 10;\n          _context12.t0 = _context12[\"catch\"](0);\n          return _context12.abrupt(\"return\");\n\n        case 13:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, null, null, [[0, 10]], Promise);\n};\n\nvar registerForPushNotificationsAsync = function registerForPushNotificationsAsync(url, dispatch) {\n  var _await$Permissions$as, existingStatus, finalStatus, _await$Permissions$as2, status, token, form, response;\n\n  return _regeneratorRuntime.async(function registerForPushNotificationsAsync$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          if (Constants.isDevice) {\n            _context13.next = 2;\n            break;\n          }\n\n          return _context13.abrupt(\"return\");\n\n        case 2:\n          _context13.next = 4;\n          return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.NOTIFICATIONS));\n\n        case 4:\n          _await$Permissions$as = _context13.sent;\n          existingStatus = _await$Permissions$as.status;\n          finalStatus = existingStatus;\n\n          if (!(existingStatus !== 'granted')) {\n            _context13.next = 13;\n            break;\n          }\n\n          _context13.next = 10;\n          return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.NOTIFICATIONS));\n\n        case 10:\n          _await$Permissions$as2 = _context13.sent;\n          status = _await$Permissions$as2.status;\n          finalStatus = status;\n\n        case 13:\n          if (!(finalStatus !== 'granted')) {\n            _context13.next = 15;\n            break;\n          }\n\n          return _context13.abrupt(\"return\");\n\n        case 15:\n          _context13.next = 17;\n          return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n        case 17:\n          token = _context13.sent;\n\n          if (Platform.OS === 'android') {\n            Notifications.createChannelAndroidAsync('default', {\n              name: 'default',\n              sound: true,\n              priority: 'max',\n              vibrate: [0, 250, 250, 250]\n            });\n          }\n\n          _context13.prev = 19;\n          form = new FormData();\n          form.append(\"device_id\", token);\n          _context13.next = 24;\n          return _regeneratorRuntime.awrap(axiosWithToken.post(url, form));\n\n        case 24:\n          response = _context13.sent;\n          return _context13.abrupt(\"return\");\n\n        case 28:\n          _context13.prev = 28;\n          _context13.t0 = _context13[\"catch\"](19);\n          return _context13.abrupt(\"return\");\n\n        case 31:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, null, null, [[19, 28]], Promise);\n};\n\nvar setFromMakeOrder = function setFromMakeOrder(dispatch) {\n  return function (value) {\n    dispatch({\n      type: 'setFromMakeOrder',\n      payload: value\n    });\n  };\n};\n\nvar writeOffBonuses = function writeOffBonuses(dispatch) {\n  return function () {\n    dispatch({\n      type: 'writeOffBonuses',\n      payload: value\n    });\n  };\n};\n\nvar getUserNotifications = function getUserNotifications(dispatch) {\n  return function _callee10() {\n    var language, lang, url, response, notifications, unreadNotifications;\n    return _regeneratorRuntime.async(function _callee10$(_context14) {\n      while (1) {\n        switch (_context14.prev = _context14.next) {\n          case 0:\n            _context14.prev = 0;\n            _context14.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('language'));\n\n          case 3:\n            language = _context14.sent;\n            lang = prepareLanguageToHttpRequest(language);\n            url = BASE_URL + \"/user/notifications-history?lang=\" + lang + \"&version=\" + APP_VERSION;\n            _context14.next = 8;\n            return _regeneratorRuntime.awrap(axiosWithToken.get(url, {\n              timeout: 5000\n            }));\n\n          case 8:\n            response = _context14.sent;\n\n            if (!response) {\n              _context14.next = 13;\n              break;\n            }\n\n            notifications = response.data.data || [];\n            unreadNotifications = notifications.filter(function (item) {\n              return item.read === 0;\n            });\n            return _context14.abrupt(\"return\", dispatch({\n              type: 'setNotifications',\n              payload: {\n                notifications: notifications,\n                unread: unreadNotifications.length\n              }\n            }));\n\n          case 13:\n            _context14.next = 17;\n            break;\n\n          case 15:\n            _context14.prev = 15;\n            _context14.t0 = _context14[\"catch\"](0);\n\n          case 17:\n          case \"end\":\n            return _context14.stop();\n        }\n      }\n    }, null, null, [[0, 15]], Promise);\n  };\n};\n\nvar getNotification = function getNotification(dispatch) {\n  return function _callee11(notificationId, status) {\n    var language, lang, url, form, response;\n    return _regeneratorRuntime.async(function _callee11$(_context15) {\n      while (1) {\n        switch (_context15.prev = _context15.next) {\n          case 0:\n            _context15.prev = 0;\n\n            if (!(parseInt(status) === 1)) {\n              _context15.next = 5;\n              break;\n            }\n\n            return _context15.abrupt(\"return\", dispatch({\n              type: 'getNotification',\n              payload: {\n                id: notificationId,\n                decrase: false\n              }\n            }));\n\n          case 5:\n            _context15.next = 7;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('language'));\n\n          case 7:\n            language = _context15.sent;\n            lang = prepareLanguageToHttpRequest(language);\n            url = BASE_URL + \"/user/set-notification-status-as-read?lang=\" + lang + \"&version=\" + APP_VERSION;\n            form = new FormData();\n            form.append('user_notification_history_id', notificationId);\n            _context15.next = 14;\n            return _regeneratorRuntime.awrap(axiosWithToken.post(url, form));\n\n          case 14:\n            response = _context15.sent;\n\n            if (!(response.data.status === 'success')) {\n              _context15.next = 17;\n              break;\n            }\n\n            return _context15.abrupt(\"return\", dispatch({\n              type: 'getNotification',\n              payload: {\n                id: notificationId,\n                decrase: true\n              }\n            }));\n\n          case 17:\n            _context15.next = 21;\n            break;\n\n          case 19:\n            _context15.prev = 19;\n            _context15.t0 = _context15[\"catch\"](0);\n\n          case 21:\n          case \"end\":\n            return _context15.stop();\n        }\n      }\n    }, null, null, [[0, 19]], Promise);\n  };\n};\n\nvar clearNotification = function clearNotification(dispatch) {\n  return function () {\n    dispatch({\n      type: 'clearNotification'\n    });\n  };\n};\n\nvar updateUserData = function updateUserData(dispatch) {\n  return function (field, value) {\n    dispatch({\n      type: 'updateUser',\n      payload: {\n        field: field,\n        value: value\n      }\n    });\n  };\n};\n\nvar _createDataContext = createDataContext(authReducer, {\n  writeOffBonuses: writeOffBonuses,\n  setFromMakeOrder: setFromMakeOrder,\n  clearNetworkError: clearNetworkError,\n  clearValidationErrors: clearValidationErrors,\n  setValidationErrors: setValidationErrors,\n  setCustomerData: setCustomerData,\n  setNetworkError: setNetworkError,\n  login: login,\n  changePassword: changePassword,\n  facebookLogin: facebookLogin,\n  updateProfile: updateProfile,\n  registerUser: registerUser,\n  logout: logout,\n  clearAllValidationsErrors: clearAllValidationsErrors,\n  fetchUserByToken: fetchUserByToken,\n  requestPasswordReset: requestPasswordReset,\n  updateNotificationsSettings: updateNotificationsSettings,\n  getUserNotifications: getUserNotifications,\n  getNotification: getNotification,\n  clearNotification: clearNotification,\n  updateLastOrderAddress: updateLastOrderAddress,\n  updateUserData: updateUserData\n}, {\n  fromMakeOrder: false,\n  last_order_address: {},\n  networkError: false,\n  isDataFetching: false,\n  validationErrors: {},\n  isLoggedIn: false,\n  user: {},\n  customerData: {\n    phone: null,\n    password: null,\n    email: null,\n    promo_code: null\n  },\n  unreadNotifications: 0,\n  ordersStatuses: {\n    uk: [{\n      name: \"В очікуванні\",\n      color: \"#F7772E\"\n    }, {\n      name: \"Замовлення готується\",\n      color: \"#1877F2\"\n    }, {\n      name: \"Замовлення в дорозі\",\n      color: \"#08C83E\"\n    }, {\n      name: \"Доставлено\",\n      color: \"#444444\"\n    }, {\n      name: \"Відмінено\",\n      color: \"#E90101\"\n    }],\n    ru: [{\n      name: \"В ожидании\",\n      color: \"#F7772E\"\n    }, {\n      name: \"Заказ готовится\",\n      color: \"#1877F2\"\n    }, {\n      name: \"Заказ в пути\",\n      color: \"#08C83E\"\n    }, {\n      name: \"Доставлено\",\n      color: \"#444444\"\n    }, {\n      name: \"Отменено\",\n      color: \"#E90101\"\n    }],\n    en: [{\n      name: \"Pending\",\n      color: \"#F7772E\"\n    }, {\n      name: \"Being prepared\",\n      color: \"#1877F2\"\n    }, {\n      name: \"On the road\",\n      color: \"#08C83E\"\n    }, {\n      name: \"Delivered\",\n      color: \"#444444\"\n    }, {\n      name: \"Canceled\",\n      color: \"#E90101\"\n    }]\n  },\n  notifications: [],\n  notifiaction: null,\n  isMoreDataLoading: false\n}),\n    Provider = _createDataContext.Provider,\n    Context = _createDataContext.Context;\n\nexport { Provider, Context };","map":{"version":3,"sources":["/home/alex/workspace/papamama/src/context/AuthContext.js"],"names":["createDataContext","Notifications","Permissions","Constants","navigate","axiosWithToken","axiosWithErrorHandler","prepareLanguageToHttpRequest","BASE_URL","APP_VERSION","authReducer","state","action","type","redirectable","payload","fromMakeOrder","user","isLoggedIn","networkError","validationErrors","isDataLoading","isDataFetching","newOrdersHistoryMeta","language","last_order_address","ordersHistory","ordersHistoryMetaData","notifications","unreadNotifications","unread","needle","newNotifications","map","item","id","read","newUnred","decrase","notification","field","value","bonuses","customerData","isOrdersHistoryRefreshing","device_id","isMoreDataLoading","clearNetworkError","dispatch","setNetworkError","clearValidationErrors","setValidationErrors","errors","setCustomerData","login","formData","AsyncStorage","getItem","lang","url","post","response","authHandler","data","message","error","password","Error","changePassword","requestPasswordReset","registerUser","facebookLogin","updateProfile","logout","removeItem","updateNotificationsSettings","getLastOrderAddress","get","then","address","Array","isArray","catch","updateLastOrderAddress","fetchUserByToken","timeout","dispatchAction","token","auth_key","setItem","handleNotifications","clearAllValidationsErrors","registerForPushNotificationsAsync","isDevice","askAsync","NOTIFICATIONS","existingStatus","status","finalStatus","getExpoPushTokenAsync","Platform","OS","createChannelAndroidAsync","name","sound","priority","vibrate","form","FormData","append","setFromMakeOrder","writeOffBonuses","getUserNotifications","filter","length","getNotification","notificationId","parseInt","clearNotification","updateUserData","phone","email","promo_code","ordersStatuses","uk","color","ru","en","notifiaction","Provider","Context"],"mappings":"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","sourcesContent":["//Imports\nimport createDataContext from \"./createDataContext\";\nimport {AsyncStorage, Platform} from 'react-native';\n//Expo\nimport {Notifications} from 'expo';\nimport * as Permissions from 'expo-permissions';\nimport Constants from 'expo-constants';\n//Navigation\nimport {navigate} from \"../_navigationRefs\";\n//Api\nimport axiosWithToken from \"../services/axiosWithToken\";\nimport axiosWithErrorHandler from \"../services/axiosWithErrorHandler\";\n//Helpers\nimport {prepareLanguageToHttpRequest} from \"../helpers/helpers\";\n//Global vars\nimport {BASE_URL, APP_VERSION} from \"../different/global_vars\";\n\n\n//Reducer\nconst authReducer = (state, action) => {\n    switch (action.type) {\n        case 'login':\n            let redirectable = action.payload.redirectable;\n            if (redirectable) {\n                navigate(state.fromMakeOrder ? 'MakeOrder' : 'AppMenu')\n            }\n            return {\n                ...state,\n                user: action.payload.user,\n                isLoggedIn: true,\n                networkError: false,\n                validationErrors: {},\n                isDataLoading: false,\n                fromMakeOrder: false\n            };\n        case 'updateUserInfo':\n            navigate('AppMenu')\n            return {\n                ...state,\n                user: action.payload.user,\n                networkError: false,\n                isDataFetching: false,\n                validationErrors: {},\n                isLoggedIn: true,\n                fromMakeOrder: false\n            }\n        case 'logout':\n            let newOrdersHistoryMeta = {\n                language: null\n            }\n            return {\n                ...state,\n                user: {},\n                isLoggedIn: false,\n                last_order_address: {},\n                ordersHistory: [],\n                ordersHistoryMetaData: newOrdersHistoryMeta\n            };\n        case 'setNotifications':\n            return {...state, notifications: action.payload.notifications, unreadNotifications: action.payload.unread}\n        case 'getNotification':\n            let needle;\n            let newNotifications = state.notifications.map(item => {\n                if (item.id === action.payload.id) {\n                    item.read = 1;\n                    needle = item;\n                }\n                return item;\n            });\n            let newUnred = action.payload.decrase ? state.unreadNotifications - 1 : state.unreadNotifications;\n            return {...state, notification: needle, notifications: newNotifications, unreadNotifications: newUnred}\n        case 'clearNotification':\n            return {...state, notification: null}\n        case 'updateUser':\n            return {...state, user: {...state.user, [action.payload.field]: action.payload.value}}\n        case 'updateNotificationsSettings':\n            return {...state, user: {...state.user, ...action.payload}, isDataFetching: false, networkError: false}\n        case 'writeOffBonuses':\n            return {...state, user: {...state.user, bonuses: 0}}\n        case 'setFromMakeOrder':\n            return {...state, fromMakeOrder: action.payload}\n        case 'setLastOrderAddress':\n            return {...state, last_order_address: action.payload}\n        case 'setCustomerData':\n            return {...state, customerData: {...state.customerData, [action.payload.field]: action.payload.value}};\n        case 'clearNetworkError':\n            return {...state, networkError: false, isDataFetching: false, isOrdersHistoryRefreshing: false};\n        case 'setDeviceId':\n            return {...state, user: {...state.user, device_id: action.payload}}\n        case 'setNetworkError':\n            return {...state, networkError: action.payload, isDataFetching: false, isOrdersHistoryRefreshing: false}\n        case 'setIsMoreDataLoading':\n            return { ...state, isMoreDataLoading: true }\n        case 'setIsDataFetching':\n            return {...state, isDataFetching: true}\n        case 'setValidationErrors':\n            return {\n                ...state,\n                validationErrors: action.payload,\n                networkError: false,\n                isDataFetching: false,\n                isDataLoading: false\n            };\n        case 'clearValidationErrors':\n            return {...state, validationErrors: {...state.validationErrors, [action.payload]: null}};\n        case 'clearAllValidationsErrors':\n            return {...state, validationErrors: {}}\n        default:\n            return {...state}\n    }\n};\n\n\n//Actions\n/**\n * clear 'Some thing went wrong' :)\n */\nconst clearNetworkError = dispatch => () => {\n    dispatch({type: 'clearNetworkError'});\n}\n\n\nconst setNetworkError = dispatch => () => {\n    dispatch({type: 'setNetworkError', payload: 'An error occured'})\n}\n\n\n/**\n * clear validation errors\n */\nconst clearValidationErrors = dispatch => (field) => {\n    dispatch({type: 'clearValidationErrors', payload: field});\n}\n\n\n/**\n * set validation errors\n */\nconst setValidationErrors = dispatch => (errors) => {\n    dispatch({type: 'setValidationErrors', payload: errors});\n}\n\n\n/**\n * set validation errors\n */\nconst setCustomerData = dispatch => (field, value) => {\n    dispatch({type: 'setCustomerData', payload: {field, value}});\n}\n\n\n/*LOG IN*/\nconst login = dispatch => async (formData) => {\n    try {\n        const language = await AsyncStorage.getItem('language');\n        const lang = prepareLanguageToHttpRequest(language);\n        const url = `${BASE_URL}/user/login?lang=${lang}&version=${APP_VERSION}`;\n        const response = await axiosWithErrorHandler.post(url, formData);\n\n        if (response) {\n            await authHandler(response, dispatch, 'login');\n        }\n    } catch (err) {\n        if (err && err.response && err.response.data && err.response.data.message) {\n            let error = err.response.data.message;\n            dispatch({type: 'setValidationErrors', payload: {password: error}});\n        } else {\n            dispatch({type: 'setNetworkError', payload: true});\n        }\n        throw new Error('Login failed');\n    }\n}\n\n\nconst changePassword = dispatch => async (formData) => {\n    try {\n        const language = await AsyncStorage.getItem('language');\n        const lang = prepareLanguageToHttpRequest(language);\n        const url = `${BASE_URL}/user/change-password?lang=${lang}&version=${APP_VERSION}`;\n        const response = await axiosWithToken.post(url, formData);\n        if (response && response.data && response.data.message) {\n            let message = response.data.message;\n            return message;\n        }\n        throw new Error('Password change failed');\n    } catch (error) {\n        if (error && error.response && error.response.data && error.response.data.errors) {\n            let errors = error.response.data.errors;\n            dispatch({type: 'setValidationErrors', payload: errors});\n        } else {\n            dispatch({type: 'setNetworkError', payload: true});\n        }\n        throw new Error('Password change failed');\n    }\n}\n\n\nconst requestPasswordReset = dispatch => async (formData) => {\n    try {\n        const language = await AsyncStorage.getItem('language');\n        const lang = prepareLanguageToHttpRequest(language);\n        const url = `${BASE_URL}/user/request-password-reset?lang=${lang}&version=${APP_VERSION}`;\n        const response = await axiosWithToken.post(url, formData);\n        if (response && response.data && response.data.message) {\n            let message = response.data.message;\n            return message;\n        }\n        throw new Error('Request reset password failed');\n    } catch (error) {\n        if (error && error.response && error.response.data && error.response.data.errors) {\n            let errors = error.response.data.errors;\n            dispatch({type: 'setValidationErrors', payload: errors});\n        } else {\n            dispatch({type: 'setNetworkError', payload: true});\n        }\n        throw new Error('Request reset password failed');\n    }\n}\n\n\n/*SUGN UP*/\nconst registerUser = dispatch => async (formData) => {\n    try {\n        const language = await AsyncStorage.getItem('language');\n        const lang = prepareLanguageToHttpRequest(language);\n        const url = `${BASE_URL}/user/signup?lang=${lang}&version=${APP_VERSION}`;\n        const response = await axiosWithErrorHandler.post(url, formData);\n\n        if (response) {\n            await authHandler(response, dispatch, 'login');\n        }\n    } catch (error) {\n        if (error && error.response && error.response.data && error.response.data.errors) {\n            let errors = error.response.data.errors;\n            dispatch({type: 'setValidationErrors', payload: errors});\n        } else {\n            dispatch({type: 'setNetworkError', payload: true});\n        }\n        throw new Error('Login failed');\n    }\n}\n\n/**\n * Facebook login\n */\nconst facebookLogin = dispatch => async (data) => {\n    try {\n        const language = await AsyncStorage.getItem('language');\n        const lang = prepareLanguageToHttpRequest(language);\n        const url = `${BASE_URL}/user/login?lang=${lang}&version=${APP_VERSION}`;\n        const response = await axiosWithErrorHandler.post(url, data);\n\n        if (response) {\n            await authHandler(response, dispatch, 'login');\n        }\n    } catch (error) {\n        throw new Error(error.response.data.message);\n    }\n}\n\n/**\n * Update User Profile\n */\nconst updateProfile = dispatch => async (formData) => {\n    try {\n        const language = await AsyncStorage.getItem('language');\n        const lang = prepareLanguageToHttpRequest(language);\n        const url = `${BASE_URL}/user/settings?lang=${lang}&version=${APP_VERSION}`;\n        const response = await axiosWithToken.post(url, formData);\n\n        if (response) {\n            authHandler(response, dispatch, 'updateUserInfo');\n        }\n    } catch (error) {\n        if (error && error.response && error.response.data && error.response.data.errors) {\n            let errors = error.response.data.errors;\n            dispatch({type: 'setValidationErrors', payload: errors});\n        } else {\n            dispatch({type: 'setNetworkError', payload: true});\n        }\n        throw new Error('Edit data failed');\n    }\n}\n\n\n/* LOG OUT */\nconst logout = dispatch => async () => {\n    await AsyncStorage.removeItem('token');\n    dispatch({type: 'logout'})\n    navigate('Menu');\n}\n\n\nconst updateNotificationsSettings = dispatch => async (formData, notifications) => {\n    try {\n        dispatch({type: 'setIsDataFetching'});\n        const language = await AsyncStorage.getItem('language');\n        const lang = prepareLanguageToHttpRequest(language);\n        const url = `${BASE_URL}/user/notifications?lang=${lang}&version=${APP_VERSION}`;\n        const response = await axiosWithToken.post(url, formData);\n\n        if (response) {\n            dispatch({type: 'updateNotificationsSettings', payload: notifications});\n        }\n    } catch (error) {\n        dispatch({type: 'setNetworkError', payload: true});\n    }\n}\n\n\n\n\nconst getLastOrderAddress = async (dispatch) => {\n    try {\n        const language = await AsyncStorage.getItem('language');\n        const lang = prepareLanguageToHttpRequest(language);\n        const url = `${BASE_URL}/user/last-order?lang=${lang}&version=${APP_VERSION}`;\n\n        axiosWithToken.get(url)\n            .then((response) => {\n                if (response && response.data && response.data.data) {\n                    let address = response.data.data;\n                    if (Array.isArray(address)) return;\n\n                    if (address) {\n                        dispatch({type: 'setLastOrderAddress', payload: address});\n                    }\n                }\n            })\n            .catch(error => {\n                // Nothing because request isn't critical\n            });\n    } catch (error) {\n        // Nothing because request isn't critical\n    }\n}\n\n\nconst updateLastOrderAddress = dispatch => (address) => {\n    dispatch({type: 'setLastOrderAddress', payload: address});\n}\n\n\nconst fetchUserByToken = dispatch => async () => {\n    try {\n        const language = await AsyncStorage.getItem('language');\n        const lang = prepareLanguageToHttpRequest(language);\n        const url = `${BASE_URL}/user/settings?lang=${lang}&version=${APP_VERSION}`;\n\n        const response = await axiosWithToken.get(url, {timeout: 5000});\n\n        if (response) {\n            authHandler(response, dispatch, 'login', false);\n        }\n    } catch (error) {\n        dispatch({type: 'setNetworkError', payload: true});\n    }\n}\n\n\n/**\n * Login helper (mainly for avoiding code repeating)\n */\nconst authHandler = async (response, dispatch, dispatchAction, redirectable = true) => {\n    if (response) {\n        try {\n            // Setting up token to storage\n            let token;\n            if (dispatchAction === 'updateUserInfo') {\n                token = (response.data && response.data.user && response.data.user.auth_key) ? response.data.user.auth_key : null;\n            } else {\n                token = (response.data && response.data.data && response.data.data.auth_key) ? response.data.data.auth_key : null;\n            }\n\n            if (token) {\n                await AsyncStorage.setItem('token', token);\n            }\n\n            let user = response.data.data || response.data.user;\n\n            await handleNotifications(dispatch);\n\n            //Fetching last order address for auto input\n            getLastOrderAddress(dispatch);\n\n            // Setting up customer\n            dispatch({type: dispatchAction, payload: {user: user, redirectable: redirectable}});\n        } catch (error) {\n            throw error;\n        }\n    }\n}\n\n\nconst clearAllValidationsErrors = dispatch => () => {\n    dispatch({type: 'clearAllValidationsErrors'});\n}\n\n\nconst handleNotifications = async (dispatch) => {\n    try {\n        const language = await AsyncStorage.getItem('language');\n        const lang = prepareLanguageToHttpRequest(language);\n        const url = `${BASE_URL}/user/set-device?lang=${lang}&version=${APP_VERSION}`;\n        await registerForPushNotificationsAsync(url, dispatch)\n    } catch (error) {\n        return;\n    }\n}\n\n\nconst registerForPushNotificationsAsync = async (url, dispatch) => {\n    if (!Constants.isDevice) return;\n\n    const {status: existingStatus} = await Permissions.askAsync(Permissions.NOTIFICATIONS);\n\n    let finalStatus = existingStatus;\n    if (existingStatus !== 'granted') {\n        const {status} = await Permissions.askAsync(Permissions.NOTIFICATIONS);\n        finalStatus = status;\n    }\n    if (finalStatus !== 'granted') return;\n    let token = await Notifications.getExpoPushTokenAsync();\n    // POST the token to your backend server from where you can retrieve it to send push notifications.\n    if (Platform.OS === 'android') {\n        Notifications.createChannelAndroidAsync('default', {\n            name: 'default',\n            sound: true,\n            priority: 'max',\n            vibrate: [0, 250, 250, 250],\n        });\n    }\n    try {\n        let form = new FormData();\n        form.append(\"device_id\", token);\n        let response = await axiosWithToken.post(url, form)\n        return;\n    } catch (error) {\n        return;\n    }\n}\n\n\nconst setFromMakeOrder = dispatch => (value) => {\n    dispatch({type: 'setFromMakeOrder', payload: value})\n}\n\n\nconst writeOffBonuses = dispatch => () => {\n    dispatch({type: 'writeOffBonuses', payload: value})\n}\n\n\nconst getUserNotifications = dispatch => async () => {\n    try {\n        const language = await AsyncStorage.getItem('language');\n        const lang = prepareLanguageToHttpRequest(language);\n        const url = `${BASE_URL}/user/notifications-history?lang=${lang}&version=${APP_VERSION}`;\n\n        const response = await axiosWithToken.get(url, {timeout: 5000});\n\n        if (response) {\n            const notifications = response.data.data || [];\n\n            const unreadNotifications = notifications.filter(item => item.read === 0);\n            return dispatch({type: 'setNotifications', payload: {notifications, unread: unreadNotifications.length}});\n        }\n    } catch (error) {\n        //NOTHING BECAUSE REQUEST ISN\"T CRITICAL\n    }\n}\n\n\nconst getNotification = dispatch => async (notificationId, status) => {\n    try {\n        if (parseInt(status) === 1) {\n            return dispatch({type: 'getNotification', payload: {id: notificationId, decrase: false}});\n        } else {\n            const language = await AsyncStorage.getItem('language');\n            const lang = prepareLanguageToHttpRequest(language);\n            const url = `${BASE_URL}/user/set-notification-status-as-read?lang=${lang}&version=${APP_VERSION}`;\n\n            let form = new FormData();\n            form.append('user_notification_history_id', notificationId);\n            const response = await axiosWithToken.post(url, form);\n\n            if (response.data.status === 'success') {\n                return dispatch({type: 'getNotification', payload: {id: notificationId, decrase: true}});\n            }\n        }\n    } catch (error) {\n        //NOTHING BECAUSE REQUEST ISN\"T CRITICAL\n    }\n}\n\n\nconst clearNotification = dispatch => () => {\n    dispatch({type: 'clearNotification'});\n}\n\n\nconst updateUserData = dispatch => (field, value) => {\n    dispatch({type: 'updateUser', payload: {field, value}});\n}\n\n\n//Export\nexport const {Provider, Context} = createDataContext(\n    authReducer,\n    {\n        writeOffBonuses,\n        setFromMakeOrder,\n        clearNetworkError,\n        clearValidationErrors,\n        setValidationErrors,\n        setCustomerData,\n        setNetworkError,\n        login,\n        changePassword,\n        facebookLogin,\n        updateProfile,\n        registerUser,\n        logout,\n        clearAllValidationsErrors,\n        fetchUserByToken,\n        requestPasswordReset,\n        updateNotificationsSettings,\n        getUserNotifications,\n        getNotification,\n        clearNotification,\n        updateLastOrderAddress,\n        updateUserData,\n    },\n    {\n        fromMakeOrder: false,\n        last_order_address: {},\n        networkError: false,\n        isDataFetching: false,\n        validationErrors: {},\n        isLoggedIn: false,\n        user: {},\n        customerData: {\n            phone: null,\n            password: null,\n            email: null,\n            promo_code: null\n        },\n        unreadNotifications: 0,\n        ordersStatuses: {\n            uk: [\n                {\n                    name: \"В очікуванні\",\n                    color: \"#F7772E\"\n                },\n                {\n                    name: \"Замовлення готується\",\n                    color: \"#1877F2\"\n                },\n                {\n                    name: \"Замовлення в дорозі\",\n                    color: \"#08C83E\"\n                },\n                {\n                    name: \"Доставлено\",\n                    color: \"#444444\"\n                },\n                {\n                    name: \"Відмінено\",\n                    color: \"#E90101\"\n                }\n            ],\n            ru: [\n                {\n                    name: \"В ожидании\",\n                    color: \"#F7772E\"\n                },\n                {\n                    name: \"Заказ готовится\",\n                    color: \"#1877F2\"\n                },\n                {\n                    name: \"Заказ в пути\",\n                    color: \"#08C83E\"\n                },\n                {\n                    name: \"Доставлено\",\n                    color: \"#444444\"\n                },\n                {\n                    name: \"Отменено\",\n                    color: \"#E90101\"\n                }\n            ],\n            en: [\n                {\n                    name: \"Pending\",\n                    color: \"#F7772E\"\n                },\n                {\n                    name: \"Being prepared\",\n                    color: \"#1877F2\"\n                },\n                {\n                    name: \"On the road\",\n                    color: \"#08C83E\"\n                },\n                {\n                    name: \"Delivered\",\n                    color: \"#444444\"\n                },\n                {\n                    name: \"Canceled\",\n                    color: \"#E90101\"\n                }\n            ]\n        },\n        notifications: [],\n        notifiaction: null,\n        isMoreDataLoading: false\n    }\n);\n\n"]},"metadata":{},"sourceType":"module"}