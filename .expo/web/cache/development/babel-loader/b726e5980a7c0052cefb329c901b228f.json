{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/alex/workspace/papamama/src/screens/ChangePasswordScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { createIconSetFromIcoMoon } from \"@expo/vector-icons\";\nimport icoMoonConfig from \"../../selection.json\";\nvar IcoMoonIcon = createIconSetFromIcoMoon(icoMoonConfig, 'icomoon', 'icomoon.ttf');\nimport { Context as AppSettingsContext } from \"../context/AppSettingsContext\";\nimport { Context as AuthContext } from \"../context/AuthContext\";\nimport Header from \"../components/shared/Header\";\nimport { SafeView, Block, Spacer } from \"../components/shared\";\nimport { ButtonPrimary } from \"../components/buttons\";\nimport { PasswordInput } from \"../components/inputs\";\nimport { PasswordChangedModal, NetworkErrorModal } from \"../components/modals\";\nimport translator from \"../translator/translator\";\nimport styles from \"../styles/screens/change-password-screen\";\nimport { app_styles } from \"../styles/app_styles\";\n\nvar ChangePasswordScreen = function ChangePasswordScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useContext = useContext(AppSettingsContext),\n      _useContext$state = _useContext.state,\n      language = _useContext$state.language,\n      scales = _useContext$state.scales;\n\n  var _useContext2 = useContext(AuthContext),\n      _useContext2$state = _useContext2.state,\n      validationErrors = _useContext2$state.validationErrors,\n      networkError = _useContext2$state.networkError,\n      clearValidationErrors = _useContext2.clearValidationErrors,\n      setValidationErrors = _useContext2.setValidationErrors,\n      clearNetworkError = _useContext2.clearNetworkError,\n      changePassword = _useContext2.changePassword,\n      clearAllValidationsErrors = _useContext2.clearAllValidationsErrors;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isDataLoading = _useState2[0],\n      setIsDataLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      showPasswordChangedModal = _useState4[0],\n      setShowPasswordChangedModal = _useState4[1];\n\n  var _useState5 = useState({\n    old_password: null,\n    new_password: null,\n    password_repeat: null\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      formData = _useState6[0],\n      setFormData = _useState6[1];\n\n  useEffect(function () {\n    var listener = navigation.addListener('didBlur', function () {\n      clearAllValidationsErrors();\n    });\n    return function () {\n      listener.remove();\n    };\n  }, []);\n\n  var handleInputs = function handleInputs(name, value) {\n    setFormData(_objectSpread(_objectSpread({}, formData), {}, _defineProperty({}, name, value)));\n  };\n\n  var formSubmit = function formSubmit() {\n    var form, key;\n    return _regeneratorRuntime.async(function formSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            setIsDataLoading(true);\n\n            if (!hasEmptyFields(formData)) {\n              _context.next = 5;\n              break;\n            }\n\n            setIsDataLoading(false);\n            return _context.abrupt(\"return\");\n\n          case 5:\n            if (passwordsMatch()) {\n              _context.next = 8;\n              break;\n            }\n\n            setIsDataLoading(false);\n            return _context.abrupt(\"return\");\n\n          case 8:\n            form = new FormData();\n\n            for (key in formData) {\n              form.append([key], formData[key]);\n            }\n\n            _context.next = 12;\n            return _regeneratorRuntime.awrap(changePassword(form));\n\n          case 12:\n            setIsDataLoading(false);\n            setShowPasswordChangedModal(true);\n            _context.next = 20;\n            break;\n\n          case 16:\n            _context.prev = 16;\n            _context.t0 = _context[\"catch\"](0);\n            setIsDataLoading(false);\n            setFormData(_objectSpread(_objectSpread({}, formData), {}, {\n              old_password: null\n            }));\n\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 16]], Promise);\n  };\n\n  var handlePasswordChangedModalClosing = function handlePasswordChangedModalClosing() {\n    setShowPasswordChangedModal(false);\n    navigation.goBack();\n  };\n\n  var passwordsMatch = function passwordsMatch() {\n    if (formData.new_password !== formData.password_repeat) {\n      setValidationErrors({\n        password_repeat: translator.translate(language, \"Паролі не співпадають!\")\n      });\n      return false;\n    }\n\n    return true;\n  };\n\n  var hasEmptyFields = function hasEmptyFields(data) {\n    var errors = {};\n\n    for (var key in data) {\n      if (!data[key]) {\n        errors[key] = translator.translate(language, \"Поле не може бути порожнім!\");\n      }\n\n      ;\n    }\n\n    if (Object.keys(errors).length) {\n      setValidationErrors(errors);\n      return true;\n    }\n\n    return false;\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(KeyboardAvoidingView, {\n    style: {\n      flex: 1\n    },\n    behavior: Platform.OS === 'ios' ? 'padding' : null,\n    enabled: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }, React.createElement(SafeView, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 17\n    }\n  }, React.createElement(Header, {\n    title: translator.translate(language, \"Зміна пароля\"),\n    backAllowed: true,\n    navigation: navigation,\n    noIcons: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 21\n    }\n  }), React.createElement(View, {\n    style: styles(scales).body,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 21\n    }\n  }, !networkError ? React.createElement(ScrollView, {\n    showsVerticalScrollIndicator: false,\n    bounces: false,\n    keyboardShouldPersistTaps: 'always',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 37\n    }\n  }, React.createElement(Block, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 41\n    }\n  }, React.createElement(Spacer, {\n    spaceHeight: 15,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 45\n    }\n  }), React.createElement(View, {\n    style: styles(scales).logo_container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 45\n    }\n  }, React.createElement(IcoMoonIcon, {\n    name: \"logo_emma\",\n    size: Math.round(scales.widthScale * 75),\n    color: app_styles(scales).colors.app.blue,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 49\n    }\n  })), React.createElement(Spacer, {\n    spaceHeight: 45,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 45\n    }\n  }), React.createElement(PasswordInput, {\n    callback: handleInputs,\n    placeholder: translator.translate(language, \"Пароль\"),\n    clearError: clearValidationErrors,\n    value: formData.old_password,\n    name: \"old_password\",\n    error: validationErrors.old_password,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 45\n    }\n  }), React.createElement(Spacer, {\n    spaceHeight: 25,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 45\n    }\n  }), React.createElement(PasswordInput, {\n    callback: handleInputs,\n    placeholder: translator.translate(language, \"Новий пароль\"),\n    clearError: clearValidationErrors,\n    value: formData.new_password,\n    name: \"new_password\",\n    error: validationErrors.new_password,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 45\n    }\n  }), React.createElement(Spacer, {\n    spaceHeight: 25,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 45\n    }\n  }), React.createElement(PasswordInput, {\n    callback: handleInputs,\n    placeholder: translator.translate(language, \"Підтвердіть новий пароль\"),\n    clearError: clearValidationErrors,\n    value: formData.password_repeat,\n    error: validationErrors.password_repeat,\n    name: \"password_repeat\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 45\n    }\n  }), React.createElement(Spacer, {\n    spaceHeight: 30,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 45\n    }\n  }), React.createElement(ButtonPrimary, {\n    title: translator.translate(language, \"Змінити пароль\"),\n    color: app_styles(scales).colors.app.blue,\n    isDataLoading: isDataLoading,\n    callback: formSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 45\n    }\n  }))) : React.createElement(NetworkErrorModal, {\n    isOpened: networkError,\n    closeCallback: clearNetworkError,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 35\n    }\n  })))), React.createElement(PasswordChangedModal, {\n    isOpened: showPasswordChangedModal,\n    closeCallback: handlePasswordChangedModalClosing,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default ChangePasswordScreen;","map":{"version":3,"sources":["/home/alex/workspace/papamama/src/screens/ChangePasswordScreen.js"],"names":["React","useState","useContext","useEffect","createIconSetFromIcoMoon","icoMoonConfig","IcoMoonIcon","Context","AppSettingsContext","AuthContext","Header","SafeView","Block","Spacer","ButtonPrimary","PasswordInput","PasswordChangedModal","NetworkErrorModal","translator","styles","app_styles","ChangePasswordScreen","navigation","state","language","scales","validationErrors","networkError","clearValidationErrors","setValidationErrors","clearNetworkError","changePassword","clearAllValidationsErrors","isDataLoading","setIsDataLoading","showPasswordChangedModal","setShowPasswordChangedModal","old_password","new_password","password_repeat","formData","setFormData","listener","addListener","remove","handleInputs","name","value","formSubmit","hasEmptyFields","passwordsMatch","form","FormData","key","append","handlePasswordChangedModalClosing","goBack","translate","data","errors","Object","keys","length","flex","Platform","OS","body","logo_container","Math","round","widthScale","colors","app","blue"],"mappings":"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","sourcesContent":["//----IMPORTS----//\n//React\nimport React, { useState, useContext, useEffect } from 'react';\n//React native\nimport { View, KeyboardAvoidingView, ScrollView, } from 'react-native';\n//React-native-vector-icons package\nimport {createIconSetFromIcoMoon} from 'react-native-vector-icons';\nimport icoMoonConfig from '../../selection.json';\n\nconst IcoMoonIcon = createIconSetFromIcoMoon(icoMoonConfig, 'icomoon', 'icomoon.ttf');\n//Context\nimport { Context as AppSettingsContext } from \"../context/AppSettingsContext\";\nimport { Context as AuthContext } from \"../context/AuthContext\";\n//Componetns\nimport Header from \"../components/shared/Header\";\nimport { SafeView, Block, Spacer } from \"../components/shared\";\nimport { ButtonPrimary } from \"../components/buttons\";\nimport { PasswordInput } from \"../components/inputs\";\nimport { PasswordChangedModal, NetworkErrorModal } from \"../components/modals\";\n//Localization\nimport translator from \"../translator/translator\";\n//Styles\nimport styles from '../styles/screens/change-password-screen';\nimport { app_styles } from '../styles/app_styles';\n\n\n\n//----COMPONENT----//\nconst ChangePasswordScreen = ({ navigation }) => {\n    //Data and State\n    const { state: { language, scales } } = useContext(AppSettingsContext);\n    const { state: { validationErrors, networkError }, clearValidationErrors, setValidationErrors, clearNetworkError, changePassword, clearAllValidationsErrors } = useContext(AuthContext);\n    const [isDataLoading, setIsDataLoading] = useState(false);\n    const [showPasswordChangedModal, setShowPasswordChangedModal] = useState(false);\n    const [formData, setFormData] = useState({\n        old_password: null,\n        new_password: null,\n        password_repeat: null\n    });\n\n\n\n    //Hooks and Methods\n    useEffect(() => {\n        const listener = navigation.addListener('didBlur', () => {\n            clearAllValidationsErrors()\n        });\n\n        return () => {\n            listener.remove()\n        }\n    }, []);\n\n    const handleInputs = (name, value) => {\n        setFormData({ ...formData, [name]: value })\n    }\n\n\n    const formSubmit = async () => {\n        try {\n            setIsDataLoading(true)\n            if (hasEmptyFields(formData)) {\n                setIsDataLoading(false);\n                return;\n            }\n\n            if (!passwordsMatch()) {\n                setIsDataLoading(false);\n                return;\n            }\n\n            let form = new FormData();\n            for (let key in formData) {\n                form.append([key], formData[key])\n            }\n\n            await changePassword(form);\n            setIsDataLoading(false)\n            setShowPasswordChangedModal(true)\n        } catch (error) {\n            setIsDataLoading(false);\n            setFormData({ ...formData, old_password: null });\n        }\n    }\n\n    \n\n    const handlePasswordChangedModalClosing = () => {\n        setShowPasswordChangedModal(false);\n        navigation.goBack();\n    }\n\n\n    const passwordsMatch = () => {\n        if (formData.new_password !== formData.password_repeat) {\n            setValidationErrors({\n                password_repeat: translator.translate(language, \"Паролі не співпадають!\")\n            })\n            return false;\n        }\n        return true;\n    }\n\n\n    const hasEmptyFields = (data) => {\n        let errors = {};\n        for (let key in data) {\n            if (!data[key]) {\n                errors[key] = translator.translate(language, \"Поле не може бути порожнім!\")\n            };\n        }\n        if (Object.keys(errors).length) {\n            setValidationErrors(errors);\n            return true;\n        }\n        return false;\n    }\n\n\n\n    return (\n        <>\n            <KeyboardAvoidingView style={{ flex: 1 }} behavior={Platform.OS === 'ios' ? 'padding' : null} enabled>\n                <SafeView>\n                    <Header\n                        title={translator.translate(language, \"Зміна пароля\")}\n                        backAllowed\n                        navigation={navigation}\n                        noIcons\n                    />\n                    <View style={styles(scales).body}>\n                        {\n                            !networkError\n                                ? (\n                                    <ScrollView showsVerticalScrollIndicator={false} bounces={false} keyboardShouldPersistTaps={'always'}>\n                                        <Block>\n                                            <Spacer spaceHeight={15} />\n                                            <View style={styles(scales).logo_container}>\n                                                <IcoMoonIcon\n                                                    name={\"logo_emma\"}\n                                                    size={Math.round(scales.widthScale * 75)}\n                                                    color={app_styles(scales).colors.app.blue}\n                                                />\n                                            </View>\n                                            <Spacer spaceHeight={45} />\n                                            <PasswordInput\n                                                callback={handleInputs}\n                                                placeholder={translator.translate(language, \"Пароль\")}\n                                                clearError={clearValidationErrors}\n                                                value={formData.old_password}\n                                                name=\"old_password\"\n                                                error={validationErrors.old_password}\n                                            />\n                                            <Spacer spaceHeight={25} />\n                                            <PasswordInput\n                                                callback={handleInputs}\n                                                placeholder={translator.translate(language, \"Новий пароль\")}\n                                                clearError={clearValidationErrors}\n                                                value={formData.new_password}\n                                                name=\"new_password\"\n                                                error={validationErrors.new_password}\n                                            />\n                                            <Spacer spaceHeight={25} />\n                                            <PasswordInput\n                                                callback={handleInputs}\n                                                placeholder={translator.translate(language, \"Підтвердіть новий пароль\")}\n                                                clearError={clearValidationErrors}\n                                                value={formData.password_repeat}\n                                                error={validationErrors.password_repeat}\n                                                name=\"password_repeat\"\n                                            />\n                                            <Spacer spaceHeight={30} />\n                                            <ButtonPrimary\n                                                title={translator.translate(language, \"Змінити пароль\")}\n                                                color={app_styles(scales).colors.app.blue}\n                                                isDataLoading={isDataLoading}\n                                                callback={formSubmit}\n                                            />\n                                        </Block>\n                                    </ScrollView>\n                                )\n                                : <NetworkErrorModal\n                                    isOpened={networkError}\n                                    closeCallback={clearNetworkError}\n                                />\n                        }\n                    </View>\n                </SafeView>\n            </KeyboardAvoidingView>\n            {/* Modal */}\n            <PasswordChangedModal\n                isOpened={showPasswordChangedModal}\n                closeCallback={handlePasswordChangedModalClosing}\n            />\n        </>\n\n    );\n}\n\n\n\n//----EXPORT----//\nexport default ChangePasswordScreen;"]},"metadata":{},"sourceType":"module"}