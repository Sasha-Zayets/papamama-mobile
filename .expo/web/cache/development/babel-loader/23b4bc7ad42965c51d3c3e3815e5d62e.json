{"ast":null,"code":"var _jsxFileName = \"/home/alex/workspace/papamama/src/components/buttons/ButtonToggler.js\";\nimport React, { useContext } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { createIconSetFromIcoMoon } from \"@expo/vector-icons\";\nimport icoMoonConfig from \"../../../selection.json\";\nvar IcoMoonIcon = createIconSetFromIcoMoon(icoMoonConfig, 'icomoon', 'icomoon.ttf');\nimport { Context as AppSettingsContext } from \"../../context/AppSettingsContext\";\nimport styles from \"../../styles/components/buttons/button-toggler\";\nimport { app_styles } from \"../../styles/app_styles\";\n\nvar ButtonToggler = function ButtonToggler(_ref) {\n  var callback = _ref.callback,\n      isActive = _ref.isActive;\n\n  var _useContext = useContext(AppSettingsContext),\n      scales = _useContext.state.scales;\n\n  return React.createElement(TouchableOpacity, {\n    style: [styles(scales).button, {\n      backgroundColor: isActive ? app_styles(scales).colors.app.green : app_styles(scales).colors.text.light_grey\n    }],\n    onPress: callback,\n    activeOpacity: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: [styles(scales).inner, {\n      backgroundColor: app_styles(scales).colors.app.white,\n      left: isActive ? Math.round(scales.widthScale * 19) : Math.round(scales.widthScale * 3)\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default ButtonToggler;","map":{"version":3,"sources":["/home/alex/workspace/papamama/src/components/buttons/ButtonToggler.js"],"names":["React","useContext","createIconSetFromIcoMoon","icoMoonConfig","IcoMoonIcon","Context","AppSettingsContext","styles","app_styles","ButtonToggler","callback","isActive","scales","state","button","backgroundColor","colors","app","green","text","light_grey","inner","white","left","Math","round","widthScale"],"mappings":";AAEA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;;;;;AAIA,SAASC,wBAAT;AACA,OAAOC,aAAP;AACA,IAAMC,WAAW,GAAGF,wBAAwB,CAACC,aAAD,EAAgB,SAAhB,EAA2B,aAA3B,CAA5C;AAEA,SAASE,OAAO,IAAIC,kBAApB;AAEA,OAAOC,MAAP;AACA,SAASC,UAAT;;AAMA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,OAA4B;AAAA,MAAzBC,QAAyB,QAAzBA,QAAyB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,oBAEhBV,UAAU,CAACK,kBAAD,CAFM;AAAA,MAE7BM,MAF6B,eAEtCC,KAFsC,CAE7BD,MAF6B;;AAK9C,SACI,oBAAC,gBAAD;AACI,IAAA,KAAK,EAAE,CAACL,MAAM,CAACK,MAAD,CAAN,CAAeE,MAAhB,EAAwB;AAAEC,MAAAA,eAAe,EAAEJ,QAAQ,GAAGH,UAAU,CAACI,MAAD,CAAV,CAAmBI,MAAnB,CAA0BC,GAA1B,CAA8BC,KAAjC,GAAyCV,UAAU,CAACI,MAAD,CAAV,CAAmBI,MAAnB,CAA0BG,IAA1B,CAA+BC;AAAnG,KAAxB,CADX;AAEI,IAAA,OAAO,EAAEV,QAFb;AAGI,IAAA,aAAa,EAAE,CAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CACLH,MAAM,CAACK,MAAD,CAAN,CAAeS,KADV,EAEL;AACIN,MAAAA,eAAe,EAAEP,UAAU,CAACI,MAAD,CAAV,CAAmBI,MAAnB,CAA0BC,GAA1B,CAA8BK,KADnD;AAEIC,MAAAA,IAAI,EAAEZ,QAAQ,GAAGa,IAAI,CAACC,KAAL,CAAWb,MAAM,CAACc,UAAP,GAAoB,EAA/B,CAAH,GAAwCF,IAAI,CAACC,KAAL,CAAWb,MAAM,CAACc,UAAP,GAAoB,CAA/B;AAF1D,KAFK,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,CADJ;AAgBH,CArBD;;AA2BA,eAAejB,aAAf","sourcesContent":["//----IMPORTS----//\n//React\nimport React, { useContext } from 'react';\n//React native\nimport { View, Text, TouchableOpacity, ActivityIndicator } from 'react-native';\n//React-native-vector-icons package\nimport { createIconSetFromIcoMoon } from 'react-native-vector-icons';\nimport icoMoonConfig from '../../../selection.json';\nconst IcoMoonIcon = createIconSetFromIcoMoon(icoMoonConfig, 'icomoon', 'icomoon.ttf');\n//Context\nimport { Context as AppSettingsContext } from \"../../context/AppSettingsContext\";\n//Styles\nimport styles from \"../../styles/components/buttons/button-toggler\";\nimport { app_styles } from '../../styles/app_styles';\n\n\n\n\n//----COMPONENT----//\nconst ButtonToggler = ({ callback, isActive }) => {\n    //Data and State\n    const { state: { scales } } = useContext(AppSettingsContext);\n\n    //Template\n    return (\n        <TouchableOpacity \n            style={[styles(scales).button, { backgroundColor: isActive ? app_styles(scales).colors.app.green : app_styles(scales).colors.text.light_grey }]}\n            onPress={callback}\n            activeOpacity={1}\n        >\n            <View style={[\n                    styles(scales).inner, \n                    { \n                        backgroundColor: app_styles(scales).colors.app.white,\n                        left: isActive ? Math.round(scales.widthScale * 19) : Math.round(scales.widthScale * 3), \n                    }\n                ]}\n            />\n        </TouchableOpacity>\n    );\n}\n\n\n\n\n//----EXPORT----//\nexport default ButtonToggler;"]},"metadata":{},"sourceType":"module"}