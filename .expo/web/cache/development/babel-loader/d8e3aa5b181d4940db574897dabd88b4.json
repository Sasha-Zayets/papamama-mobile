{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/alex/workspace/papamama/src/screens/RegistrationScreen.js\";\nimport React, { useEffect, useState, useContext } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { Context as AppSettingsContext } from \"../context/AppSettingsContext\";\nimport { Context as AuthContext } from \"../context/AuthContext\";\nimport { createIconSetFromIcoMoon } from \"@expo/vector-icons\";\nimport icoMoonConfig from \"../../selection.json\";\nvar IcoMoonIcon = createIconSetFromIcoMoon(icoMoonConfig, 'icomoon', 'icomoon.ttf');\nimport Header from \"../components/shared/Header\";\nimport { SafeView, Block, Spacer } from \"../components/shared\";\nimport { ButtonPrimary } from \"../components/buttons\";\nimport { PhoneInput, PasswordInput, SimpleInput, PromoInput } from \"../components/inputs\";\nimport { NetworkErrorModal } from \"../components/modals\";\nimport translator from \"../translator/translator\";\nimport styles from \"../styles/screens/registration-screen\";\nimport { app_styles } from \"../styles/app_styles\";\n\nvar RegistrationScreen = function RegistrationScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useContext = useContext(AppSettingsContext),\n      _useContext$state = _useContext.state,\n      scales = _useContext$state.scales,\n      language = _useContext$state.language;\n\n  var _useContext2 = useContext(AuthContext),\n      _useContext2$state = _useContext2.state,\n      validationErrors = _useContext2$state.validationErrors,\n      customerData = _useContext2$state.customerData,\n      networkError = _useContext2$state.networkError,\n      clearValidationErrors = _useContext2.clearValidationErrors,\n      setCustomerData = _useContext2.setCustomerData,\n      registerUser = _useContext2.registerUser,\n      setValidationErrors = _useContext2.setValidationErrors,\n      clearNetworkError = _useContext2.clearNetworkError,\n      clearAllValidationsErrors = _useContext2.clearAllValidationsErrors;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isDataLoading = _useState2[0],\n      setIsDataLoading = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      phone = _useState4[0],\n      setPhone = _useState4[1];\n\n  useEffect(function () {\n    setPhone(customerData.phone);\n    return function () {\n      clearAllValidationsErrors();\n    };\n  }, []);\n\n  var handlePhoneInput = function handlePhoneInput(value) {\n    autocompletePhone(value);\n  };\n\n  var autocompletePhone = function autocompletePhone(value) {\n    if (value !== null && value.length <= 5) {\n      setCustomerPhone(\"+380 \");\n    } else {\n      if (value === null) {\n        setCustomerPhone(null);\n        return;\n      }\n\n      if (value.length <= 17) {\n        refactorCurrentPhoneValue(value, [7, 11, 14], \" \");\n      } else if (value.length > 17) {\n        refactorCurrentPhoneValue(value, [7, 11, 14], \" \");\n        var phoneNumber = phone.substring(0, 17);\n        setCustomerPhone(phoneNumber);\n      }\n    }\n  };\n\n  var refactorCurrentPhoneValue = function refactorCurrentPhoneValue(value, charPositions, symbol) {\n    var splitedVal = value.split(\"\");\n\n    for (var i = 0; i < charPositions.length; i++) {\n      if (splitedVal[charPositions[i]] && splitedVal[charPositions[i]] !== symbol) {\n        var phoneNumber = phone.substring(0, charPositions[i]) + symbol + phone.substring(charPositions[i]) + value.substr(-1, 1);\n        setCustomerPhone(phoneNumber);\n        return;\n      } else {\n        setCustomerPhone(value);\n      }\n    }\n  };\n\n  var setCustomerPhone = function setCustomerPhone(value) {\n    setPhone(value);\n    setCustomerData('phone', value);\n  };\n\n  var submitForm = function submitForm() {\n    var newUserData, formData, form, key;\n    return _regeneratorRuntime.async(function submitForm$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            setIsDataLoading(true);\n            newUserData = JSON.parse(JSON.stringify(customerData));\n            formData = {\n              phone: newUserData.phone,\n              password: newUserData.password,\n              email: newUserData.email\n            };\n\n            if (!hasEmptyFields(formData, ['ref_promo_code'])) {\n              _context.next = 7;\n              break;\n            }\n\n            setIsLoginProcess(false);\n            return _context.abrupt(\"return\");\n\n          case 7:\n            formData.phone = newUserData.phone.replace(/\\s/g, '');\n            form = new FormData();\n\n            for (key in formData) {\n              form.append(key, formData[key]);\n            }\n\n            _context.next = 12;\n            return _regeneratorRuntime.awrap(registerUser(form));\n\n          case 12:\n            setIsDataLoading(false);\n            _context.next = 18;\n            break;\n\n          case 15:\n            _context.prev = 15;\n            _context.t0 = _context[\"catch\"](0);\n            setIsDataLoading(false);\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 15]], Promise);\n  };\n\n  var hasEmptyFields = function hasEmptyFields(data, notRequired) {\n    var errors = {};\n\n    for (var key in data) {\n      if (notRequired.includes(key)) continue;\n\n      if (!data[key]) {\n        errors[key] = translator.translate(language, \"Поле не може бути порожнім!\");\n      }\n\n      ;\n    }\n\n    if (Object.keys(errors).length) {\n      setValidationErrors(errors);\n      return true;\n    }\n\n    return false;\n  };\n\n  return React.createElement(KeyboardAvoidingView, {\n    style: {\n      flex: 1\n    },\n    behavior: Platform.OS === 'ios' ? 'padding' : null,\n    enabled: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }\n  }, React.createElement(SafeView, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }, React.createElement(Header, {\n    backAllowed: true,\n    navigation: navigation,\n    title: translator.translate(language, \"Реєстрація\"),\n    noIcons: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }\n  }), React.createElement(View, {\n    style: styles(scales).body,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 17\n    }\n  }, React.createElement(ScrollView, {\n    showsVerticalScrollIndicator: false,\n    bounces: false,\n    keyboardShouldPersistTaps: 'always',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 21\n    }\n  }, !networkError ? React.createElement(Block, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 37\n    }\n  }, React.createElement(Spacer, {\n    spaceHeight: 15,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 41\n    }\n  }), React.createElement(View, {\n    style: styles(scales).logo_container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 41\n    }\n  }, React.createElement(IcoMoonIcon, {\n    name: \"logo_emma\",\n    size: Math.round(scales.widthScale * 75),\n    color: app_styles(scales).colors.app.blue,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 45\n    }\n  })), React.createElement(Spacer, {\n    spaceHeight: 45,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 41\n    }\n  }), React.createElement(PhoneInput, {\n    callback: handlePhoneInput,\n    clearError: clearValidationErrors,\n    value: phone,\n    error: validationErrors.phone,\n    name: \"phone\",\n    placeholder: translator.translate(language, \"Телефон\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 41\n    }\n  }), React.createElement(Spacer, {\n    spaceHeight: 25,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 41\n    }\n  }), React.createElement(PasswordInput, {\n    callback: setCustomerData,\n    placeholder: translator.translate(language, \"Пароль\"),\n    clearError: clearValidationErrors,\n    value: customerData.password,\n    error: validationErrors.password,\n    name: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 41\n    }\n  }), React.createElement(Spacer, {\n    spaceHeight: 25,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 41\n    }\n  }), React.createElement(SimpleInput, {\n    callback: setCustomerData,\n    placeholder: translator.translate(language, \"Електронна пошта\"),\n    clearError: clearValidationErrors,\n    value: customerData.email,\n    error: validationErrors.email,\n    name: \"email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 41\n    }\n  }), React.createElement(Spacer, {\n    spaceHeight: 30,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 41\n    }\n  }), React.createElement(ButtonPrimary, {\n    title: translator.translate(language, \"Зареєструватися\"),\n    color: app_styles(scales).colors.app.blue,\n    isDataLoading: isDataLoading,\n    callback: submitForm,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 41\n    }\n  })) : React.createElement(NetworkErrorModal, {\n    isOpened: networkError,\n    closeCallback: clearNetworkError,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 35\n    }\n  })))));\n};\n\nexport default RegistrationScreen;","map":{"version":3,"sources":["/home/alex/workspace/papamama/src/screens/RegistrationScreen.js"],"names":["React","useEffect","useState","useContext","Context","AppSettingsContext","AuthContext","createIconSetFromIcoMoon","icoMoonConfig","IcoMoonIcon","Header","SafeView","Block","Spacer","ButtonPrimary","PhoneInput","PasswordInput","SimpleInput","PromoInput","NetworkErrorModal","translator","styles","app_styles","RegistrationScreen","navigation","state","scales","language","validationErrors","customerData","networkError","clearValidationErrors","setCustomerData","registerUser","setValidationErrors","clearNetworkError","clearAllValidationsErrors","isDataLoading","setIsDataLoading","phone","setPhone","handlePhoneInput","value","autocompletePhone","length","setCustomerPhone","refactorCurrentPhoneValue","phoneNumber","substring","charPositions","symbol","splitedVal","split","i","substr","submitForm","newUserData","JSON","parse","stringify","formData","password","email","hasEmptyFields","setIsLoginProcess","replace","form","FormData","key","append","data","notRequired","errors","includes","translate","Object","keys","flex","Platform","OS","body","logo_container","Math","round","widthScale","colors","app","blue"],"mappings":"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","sourcesContent":["//----IMPORTS----//\n//React\nimport React, { useEffect, useState, useContext } from 'react';\n//React native\nimport { View, KeyboardAvoidingView, ScrollView, Image } from 'react-native';\n//Context\nimport { Context as AppSettingsContext } from \"../context/AppSettingsContext\";\nimport { Context as AuthContext } from \"../context/AuthContext\";\n//React-native-vector-icons package\nimport {createIconSetFromIcoMoon} from 'react-native-vector-icons';\nimport icoMoonConfig from '../../selection.json';\n\nconst IcoMoonIcon = createIconSetFromIcoMoon(icoMoonConfig, 'icomoon', 'icomoon.ttf');\n//Componetns\nimport Header from \"../components/shared/Header\";\nimport { SafeView, Block, Spacer } from \"../components/shared\";\nimport { ButtonPrimary } from \"../components/buttons\";\nimport { PhoneInput, PasswordInput, SimpleInput, PromoInput } from \"../components/inputs\";\nimport { NetworkErrorModal } from \"../components/modals\";\n//Localization\nimport translator from \"../translator/translator\";\n//Styles\nimport styles from '../styles/screens/registration-screen';\nimport { app_styles } from '../styles/app_styles';\n\n\n\n//----COMPONENT----//\nconst RegistrationScreen = ({ navigation }) => {\n    //Data and State\n    const { state: { scales, language } } = useContext(AppSettingsContext);\n    const { state: { validationErrors, customerData, networkError }, clearValidationErrors, setCustomerData, registerUser, setValidationErrors, clearNetworkError, clearAllValidationsErrors } = useContext(AuthContext);\n    const [isDataLoading, setIsDataLoading] = useState(false);\n    const [phone, setPhone] = useState(null);\n\n\n    //Hooks and Methods\n    useEffect(() => {\n        setPhone(customerData.phone);\n\n        return () => {\n            clearAllValidationsErrors()\n        }\n    }, []);\n\n    /*Customer input handler*/\n    const handlePhoneInput = (value) => {\n        autocompletePhone(value)\n    }\n\n    /*For formating phone number according to design*/\n    const autocompletePhone = (value) => {\n        if (value !== null && value.length <= 5) {\n            setCustomerPhone(\"+380 \");\n        } else {\n            if (value === null) {\n                setCustomerPhone(null)\n                return;\n            }\n            if (value.length <= 17) {\n                refactorCurrentPhoneValue(value, [7, 11, 14], \" \");\n            } else if (value.length > 17) {\n                refactorCurrentPhoneValue(value, [7, 11, 14], \" \");\n                let phoneNumber = phone.substring(0, 17);\n                setCustomerPhone(phoneNumber);\n            }\n        }\n    }\n\n    /*Used in handlePhoneInput method*/\n    const refactorCurrentPhoneValue = (value, charPositions, symbol) => {\n        let splitedVal = value.split(\"\");\n\n        for (let i = 0; i < charPositions.length; i++) {\n            if (\n                splitedVal[charPositions[i]] &&\n                splitedVal[charPositions[i]] !== symbol\n            ) {\n                let phoneNumber = phone.substring(0, charPositions[i]) + symbol + phone.substring(charPositions[i]) + value.substr(-1, 1);\n                setCustomerPhone(phoneNumber);\n                return;\n            } else {\n                setCustomerPhone(value);\n            }\n        }\n    }\n\n    /*For avoiding code dublication*/\n    const setCustomerPhone = (value) => {\n        setPhone(value);\n        setCustomerData('phone', value)\n    }\n\n    const submitForm = async () => {\n        try {\n            setIsDataLoading(true)\n            let newUserData = JSON.parse(JSON.stringify(customerData));\n\n            let formData = {\n                phone: newUserData.phone,\n                password: newUserData.password,\n                email: newUserData.email,\n                // ref_promo_code: newUserData.promo_code\n            }\n\n            if (hasEmptyFields(formData, ['ref_promo_code'])) {\n                setIsLoginProcess(false)\n                return;\n            }\n\n            formData.phone = newUserData.phone.replace(/\\s/g, '');\n\n            let form = new FormData();\n            for (let key in formData) {\n                form.append(key, formData[key])\n            }\n            await registerUser(form);\n            setIsDataLoading(false);\n        } catch (error) {\n            setIsDataLoading(false);\n        }\n    }\n\n    /*Validation on empty fields*/\n    const hasEmptyFields = (data, notRequired) => {\n        let errors = {};\n        for (let key in data) {\n            if (notRequired.includes(key)) continue;\n            if (!data[key]) {\n                errors[key] = translator.translate(language, \"Поле не може бути порожнім!\")\n            };\n        }\n        if (Object.keys(errors).length) {\n            setValidationErrors(errors);\n            return true;\n        }\n        return false;\n    }\n\n\n\n\n    //Template\n    return (\n        <KeyboardAvoidingView style={{ flex: 1 }} behavior={Platform.OS === 'ios' ? 'padding' : null} enabled>\n            <SafeView>\n                <Header\n                    backAllowed\n                    navigation={navigation}\n                    title={translator.translate(language, \"Реєстрація\")}\n                    noIcons\n                />\n                <View style={styles(scales).body}>\n                    <ScrollView showsVerticalScrollIndicator={false} bounces={false} keyboardShouldPersistTaps={'always'}>\n                        {\n                            !networkError\n                                ? (\n                                    <Block>\n                                        <Spacer spaceHeight={15} />\n                                        <View style={styles(scales).logo_container}>\n                                            <IcoMoonIcon\n                                                name={\"logo_emma\"}\n                                                size={Math.round(scales.widthScale * 75)}\n                                                color={app_styles(scales).colors.app.blue}\n                                            />\n                                        </View>\n                                        <Spacer spaceHeight={45} />\n                                        <PhoneInput\n                                            callback={handlePhoneInput}\n                                            clearError={clearValidationErrors}\n                                            value={phone}\n                                            error={validationErrors.phone}\n                                            name=\"phone\"\n                                            placeholder={translator.translate(language, \"Телефон\")}\n                                        />\n                                        <Spacer spaceHeight={25} />\n                                        <PasswordInput\n                                            callback={setCustomerData}\n                                            placeholder={translator.translate(language, \"Пароль\")}\n                                            clearError={clearValidationErrors}\n                                            value={customerData.password}\n                                            error={validationErrors.password}\n                                            name=\"password\"\n                                        />\n                                        <Spacer spaceHeight={25} />\n                                        <SimpleInput\n                                            callback={setCustomerData}\n                                            placeholder={translator.translate(language, \"Електронна пошта\")}\n                                            clearError={clearValidationErrors}\n                                            value={customerData.email}\n                                            error={validationErrors.email}\n                                            name=\"email\"\n                                        />\n                                        <Spacer spaceHeight={30} />\n                                        <ButtonPrimary\n                                            title={translator.translate(language, \"Зареєструватися\")}\n                                            color={app_styles(scales).colors.app.blue}\n                                            isDataLoading={isDataLoading}\n                                            callback={submitForm}\n                                        />\n                                    </Block>\n                                )\n                                : <NetworkErrorModal\n                                    isOpened={networkError}\n                                    closeCallback={clearNetworkError}\n                                />\n                        }\n                    </ScrollView>\n                </View>\n            </SafeView>\n        </KeyboardAvoidingView>\n    );\n}\n\n\n\n//----EXPORT----//\nexport default RegistrationScreen;"]},"metadata":{},"sourceType":"module"}