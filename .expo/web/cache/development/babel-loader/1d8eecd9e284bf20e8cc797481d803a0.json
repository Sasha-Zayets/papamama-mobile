{"ast":null,"code":"var _jsxFileName = \"/home/alex/workspace/papamama/src/components/buttons/ButtonOrder.js\";\nimport React, { useContext } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { createIconSetFromIcoMoon } from \"@expo/vector-icons\";\nimport icoMoonConfig from \"../../../selection.json\";\nvar IcoMoonIcon = createIconSetFromIcoMoon(icoMoonConfig, 'icomoon', 'icomoon.ttf');\nimport { Context as AppSettingsContext } from \"../../context/AppSettingsContext\";\nimport styles from \"../../styles/components/buttons/button-order\";\nimport { app_styles } from \"../../styles/app_styles.js\";\n\nvar ButtonOrder = function ButtonOrder(_ref) {\n  var title = _ref.title,\n      callback = _ref.callback,\n      icon = _ref.icon,\n      iconName = _ref.iconName,\n      iconSize = _ref.iconSize,\n      color = _ref.color,\n      isDataLoading = _ref.isDataLoading,\n      _ref$noStretch = _ref.noStretch,\n      noStretch = _ref$noStretch === void 0 ? false : _ref$noStretch;\n\n  var _useContext = useContext(AppSettingsContext),\n      scales = _useContext.state.scales;\n\n  return React.createElement(TouchableOpacity, {\n    style: [styles(scales).button, {\n      backgroundColor: color,\n      alignSelf: noStretch ? 'center' : 'stretch',\n      paddingHorizontal: noStretch ? Math.round(scales.widthScale * 20) : null\n    }],\n    onPress: callback,\n    activeOpacity: .7,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, isDataLoading ? React.createElement(ActivityIndicator, {\n    size: \"small\",\n    color: app_styles(scales).colors.app.white,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 23\n    }\n  }) : React.createElement(React.Fragment, null, icon ? React.createElement(View, {\n    style: styles(scales).icon_container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 41\n    }\n  }, React.createElement(IcoMoonIcon, {\n    name: iconName,\n    color: app_styles(scales).colors.app.white,\n    size: iconSize,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 45\n    }\n  })) : null, React.createElement(Text, {\n    style: styles(scales).title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 29\n    }\n  }, title)));\n};\n\nexport default ButtonOrder;","map":{"version":3,"sources":["/home/alex/workspace/papamama/src/components/buttons/ButtonOrder.js"],"names":["React","useContext","createIconSetFromIcoMoon","icoMoonConfig","IcoMoonIcon","Context","AppSettingsContext","styles","app_styles","ButtonOrder","title","callback","icon","iconName","iconSize","color","isDataLoading","noStretch","scales","state","button","backgroundColor","alignSelf","paddingHorizontal","Math","round","widthScale","colors","app","white","icon_container"],"mappings":";AAEA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;;;;;AAIA,SAASC,wBAAT;AACA,OAAOC,aAAP;AACA,IAAMC,WAAW,GAAGF,wBAAwB,CAACC,aAAD,EAAgB,SAAhB,EAA2B,aAA3B,CAA5C;AAEA,SAASE,OAAO,IAAIC,kBAApB;AAEA,OAAOC,MAAP;AACA,SAASC,UAAT;;AAMA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAA4F;AAAA,MAAzFC,KAAyF,QAAzFA,KAAyF;AAAA,MAAlFC,QAAkF,QAAlFA,QAAkF;AAAA,MAAxEC,IAAwE,QAAxEA,IAAwE;AAAA,MAAlEC,QAAkE,QAAlEA,QAAkE;AAAA,MAAxDC,QAAwD,QAAxDA,QAAwD;AAAA,MAA9CC,KAA8C,QAA9CA,KAA8C;AAAA,MAAvCC,aAAuC,QAAvCA,aAAuC;AAAA,4BAAxBC,SAAwB;AAAA,MAAxBA,SAAwB,+BAAZ,KAAY;;AAAA,oBAE9EhB,UAAU,CAACK,kBAAD,CAFoE;AAAA,MAE3FY,MAF2F,eAEpGC,KAFoG,CAE3FD,MAF2F;;AAK5G,SACI,oBAAC,gBAAD;AAAkB,IAAA,KAAK,EAAE,CAACX,MAAM,CAACW,MAAD,CAAN,CAAeE,MAAhB,EAAwB;AAAEC,MAAAA,eAAe,EAAEN,KAAnB;AAA0BO,MAAAA,SAAS,EAAEL,SAAS,GAAG,QAAH,GAAc,SAA5D;AAAuEM,MAAAA,iBAAiB,EAAEN,SAAS,GAAGO,IAAI,CAACC,KAAL,CAAWP,MAAM,CAACQ,UAAP,GAAoB,EAA/B,CAAH,GAAwC;AAA3I,KAAxB,CAAzB;AAAqM,IAAA,OAAO,EAAEf,QAA9M;AAAwN,IAAA,aAAa,EAAE,EAAvO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQK,aAAa,GACP,oBAAC,iBAAD;AAAmB,IAAA,IAAI,EAAC,OAAxB;AAAgC,IAAA,KAAK,EAAER,UAAU,CAACU,MAAD,CAAV,CAAmBS,MAAnB,CAA0BC,GAA1B,CAA8BC,KAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADO,GAGL,0CAEQjB,IAAI,GAEI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEL,MAAM,CAACW,MAAD,CAAN,CAAeY,cAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,WAAD;AACI,IAAA,IAAI,EAAEjB,QADV;AAEI,IAAA,KAAK,EAAEL,UAAU,CAACU,MAAD,CAAV,CAAmBS,MAAnB,CAA0BC,GAA1B,CAA8BC,KAFzC;AAGI,IAAA,IAAI,EAAEf,QAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAFJ,GAUE,IAZd,EAcI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEP,MAAM,CAACW,MAAD,CAAN,CAAeR,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoCA,KAApC,CAdJ,CALhB,CADJ;AA0BH,CA/BD;;AAqCA,eAAeD,WAAf","sourcesContent":["//----IMPORTS----//\n//React\nimport React, { useContext } from 'react';\n//React native\nimport { View, Text, TouchableOpacity, ActivityIndicator } from 'react-native';\n//React-native-vector-icons package\nimport { createIconSetFromIcoMoon } from 'react-native-vector-icons';\nimport icoMoonConfig from '../../../selection.json';\nconst IcoMoonIcon = createIconSetFromIcoMoon(icoMoonConfig, 'icomoon', 'icomoon.ttf');\n//Context\nimport { Context as AppSettingsContext } from \"../../context/AppSettingsContext\";\n//Styles\nimport styles from \"../../styles/components/buttons/button-order\";\nimport { app_styles } from '../../styles/app_styles.js';\n\n\n\n\n//----COMPONENT----//\nconst ButtonOrder = ({ title, callback, icon, iconName, iconSize, color, isDataLoading, noStretch = false }) => {\n    //Data and State\n    const { state: { scales } } = useContext(AppSettingsContext);\n\n    //Template\n    return (\n        <TouchableOpacity style={[styles(scales).button, { backgroundColor: color, alignSelf: noStretch ? 'center' : 'stretch', paddingHorizontal: noStretch ? Math.round(scales.widthScale * 20) : null }]} onPress={callback} activeOpacity={.7}>\n            {\n                isDataLoading\n                    ? <ActivityIndicator size=\"small\" color={app_styles(scales).colors.app.white} />\n                    : (\n                        <>\n                            {\n                                icon\n                                    ? (\n                                        <View style={styles(scales).icon_container}>\n                                            <IcoMoonIcon\n                                                name={iconName}\n                                                color={app_styles(scales).colors.app.white}\n                                                size={iconSize}\n                                            />\n                                        </View>\n                                    )\n                                    : null\n                            }\n                            <Text style={styles(scales).title}>{title}</Text>\n                        </>\n                    )\n            }\n        </TouchableOpacity>\n    );\n}\n\n\n\n\n//----EXPORT----//\nexport default ButtonOrder;"]},"metadata":{},"sourceType":"module"}