{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/home/alex/workspace/papamama/src/components/shared/LanguageSwitchersBlock.js\";\nimport React, { useContext, useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport { Context as AppSettingsContext } from \"../../context/AppSettingsContext\";\nimport { VerticalSpacer } from \"../shared\";\nimport styles from \"../../styles/components/shared/language-switchers-block\";\nimport { app_styles } from \"../../styles/app_styles\";\n\nvar LanguageSwitchersBlock = function LanguageSwitchersBlock() {\n  var _useContext = useContext(AppSettingsContext),\n      _useContext$state = _useContext.state,\n      scales = _useContext$state.scales,\n      language = _useContext$state.language,\n      setLanguage = _useContext.setLanguage;\n\n  useEffect(function () {\n    if (!language) {\n      arrangeLanguageSettings();\n    }\n  }, [language]);\n\n  var defineEngFlagSrc = function defineEngFlagSrc() {\n    return language === 'english' ? require(\"../../../assets/images/flags/eng.png\") : require(\"../../../assets/images/flags/eng_nonactive.png\");\n  };\n\n  var defineUkrFlagSrc = function defineUkrFlagSrc() {\n    return language === 'ukrainian' ? require(\"../../../assets/images/flags/ukr.png\") : require(\"../../../assets/images/flags/ukr_nonactive.png\");\n  };\n\n  var arrangeLanguageSettings = function arrangeLanguageSettings() {\n    var lang;\n    return _regeneratorRuntime.async(function arrangeLanguageSettings$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('language'));\n\n          case 2:\n            lang = _context.sent;\n\n            if (lang) {\n              setLanguage(lang);\n            } else {\n              setLanguage('ukrainian');\n            }\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: app_styles(scales).row_start,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return setLanguage('ukrainian');\n    },\n    style: styles(scales).btn_group,\n    activeOpacity: .7,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, React.createElement(Image, {\n    source: defineUkrFlagSrc(),\n    style: styles(scales).flag_img,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  }), React.createElement(View, {\n    style: {\n      flexDirection: 'row'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }\n  }, React.createElement(Text, {\n    style: [styles(scales).label, {\n      color: language === 'ukrainian' ? app_styles(scales).colors.text.primary : app_styles(scales).colors.text.grey\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 21\n    }\n  }, \"\\u0423\\u043A\\u0440\"))), React.createElement(VerticalSpacer, {\n    spaceWidth: 22,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return setLanguage('english');\n    },\n    style: styles(scales).btn_group,\n    activeOpacity: .7,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, React.createElement(Image, {\n    source: defineEngFlagSrc(),\n    style: styles(scales).flag_img,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  }), React.createElement(View, {\n    style: {\n      flexDirection: 'row'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  }, React.createElement(Text, {\n    style: [styles(scales).label, {\n      color: language === 'english' ? app_styles(scales).colors.text.primary : app_styles(scales).colors.text.grey\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 21\n    }\n  }, \"Eng\"))));\n};\n\nexport default LanguageSwitchersBlock;","map":{"version":3,"sources":["/home/alex/workspace/papamama/src/components/shared/LanguageSwitchersBlock.js"],"names":["React","useContext","useState","useEffect","Context","AppSettingsContext","VerticalSpacer","styles","app_styles","LanguageSwitchersBlock","state","scales","language","setLanguage","arrangeLanguageSettings","defineEngFlagSrc","require","defineUkrFlagSrc","AsyncStorage","getItem","lang","row_start","btn_group","flag_img","flexDirection","label","color","colors","text","primary","grey"],"mappings":"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","sourcesContent":["//----IMPORTS----//\n//React\nimport React, { useContext, useState, useEffect } from \"react\";\n//React native\nimport { View, Text, TouchableOpacity, Image, AsyncStorage } from 'react-native';\n//Context\nimport { Context as AppSettingsContext } from \"../../context/AppSettingsContext\";\n//Components\nimport { VerticalSpacer } from \"../shared\";\n//Styles\nimport styles from \"../../styles/components/shared/language-switchers-block\";\nimport { app_styles } from \"../../styles/app_styles\";\n\n\n\n\n//----COMPONENT----//\nconst LanguageSwitchersBlock = () => {\n    //Data and State\n    const { state: { scales, language }, setLanguage } = useContext(AppSettingsContext);\n\n\n    //Hooks and Methods\n    useEffect(() => {\n        if(!language){\n            arrangeLanguageSettings()\n        }\n    }, [language]);\n\n\n    const defineEngFlagSrc = () => {\n        return language === 'english' ? require(\"../../../assets/images/flags/eng.png\") : require(\"../../../assets/images/flags/eng_nonactive.png\");\n    }\n\n\n    const defineUkrFlagSrc = () => {\n        return language === 'ukrainian' ? require(\"../../../assets/images/flags/ukr.png\") : require(\"../../../assets/images/flags/ukr_nonactive.png\");\n    }\n\n    // const defineRusFlagSrc = () => {\n    //     return language === 'russian' ? require(\"../../../assets/images/flags/rus.png\") : require(\"../../../assets/images/flags/rus_nonactive.png\");\n    // }\n\n\n\n    //REMOVE AFTER DEVELOPING\n    const arrangeLanguageSettings = async () => {\n        let lang = await AsyncStorage.getItem('language');\n        if (lang) {\n            setLanguage(lang)\n        } else {\n            setLanguage('ukrainian')\n        }\n    }\n\n\n    //Template\n    return (\n        <View style={app_styles(scales).row_start}>\n            <TouchableOpacity onPress={() => setLanguage('ukrainian')} style={styles(scales).btn_group} activeOpacity={.7}>\n                <Image\n                    source={defineUkrFlagSrc()}\n                    style={styles(scales).flag_img}\n                />\n                <View style={{ flexDirection: 'row' }}>\n                    <Text style={[styles(scales).label, { color: language === 'ukrainian' ? app_styles(scales).colors.text.primary : app_styles(scales).colors.text.grey }]}>Укр</Text>\n                </View>\n            </TouchableOpacity>\n            <VerticalSpacer spaceWidth={22}/>\n            <TouchableOpacity onPress={() => setLanguage('english')} style={styles(scales).btn_group} activeOpacity={.7}>\n                <Image\n                    source={defineEngFlagSrc()}\n                    style={styles(scales).flag_img}\n                />\n                <View style={{ flexDirection: 'row' }}>\n                    <Text style={[styles(scales).label, { color: language === 'english' ? app_styles(scales).colors.text.primary : app_styles(scales).colors.text.grey }]}>Eng</Text>\n                </View>\n            </TouchableOpacity>\n            {/*<VerticalSpacer spaceWidth={22}/>*/}\n            {/*<TouchableOpacity onPress={() => setLanguage('russian')} style={styles(scales).btn_group} activeOpacity={.7}>*/}\n            {/*    <Image*/}\n            {/*        source={defineRusFlagSrc()}*/}\n            {/*        style={styles(scales).flag_img}*/}\n            {/*    />*/}\n            {/*    <View style={{ flexDirection: 'row' }}>*/}\n            {/*        <Text style={[styles(scales).label, { color: language === 'russian' ? app_styles(scales).colors.text.primary : app_styles(scales).colors.text.grey }]}>Рус</Text>*/}\n            {/*    </View>*/}\n            {/*</TouchableOpacity>*/}\n        </View>\n    );\n\n}\n\n\n\n\n\n//----EXPORT----//\nexport default LanguageSwitchersBlock;\n"]},"metadata":{},"sourceType":"module"}