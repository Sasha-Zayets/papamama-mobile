{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport createDataContext from \"./createDataContext\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\nimport { navigate } from \"../_navigationRefs\";\nimport axiosWithErrorHandler from \"../services/axiosWithErrorHandler\";\nimport { languages } from \"../_language\";\nimport { prepareLanguageToHttpRequest } from \"../helpers/helpers\";\nimport { BASE_URL, APP_VERSION } from \"../different/global_vars\";\nimport translator from \"../translator/translator\";\n\nvar settingsReducer = function settingsReducer(state, action) {\n  switch (action.type) {\n    case 'setLanguage':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        language: action.payload,\n        albums: [],\n        album: {},\n        deliveryCities: [],\n        serviceInfo: {}\n      });\n\n    case 'setSettings':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        settingsNetworkError: false,\n        isDataFetching: false,\n        appSettings: action.payload.settings,\n        contacts: action.payload.contacts,\n        homeCityId: action.payload.home_city_id\n      });\n\n    case 'clearSettingsNetworkError':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        settingsNetworkError: false,\n        isDataFetching: false\n      });\n\n    case 'clearDeliveryCitiesSettingsNetworkError':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        deliveryCitiesSettingsNetworkError: false,\n        isDataFetching: false\n      });\n\n    case 'setSettingsNetworkError':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        settingsNetworkError: action.payload,\n        isDataFetching: false\n      });\n\n    case 'getDeliveryCities':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        settingsNetworkError: false,\n        isDataFetching: false,\n        deliveryCities: action.payload\n      });\n\n    case 'getRestaurant':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        settingsNetworkError: false,\n        isDataFetching: false,\n        restaurant: action.payload.restaurant,\n        restaurantMetaData: _objectSpread(_objectSpread({}, state.restaurantMetaData), {}, {\n          language: action.payload.language\n        })\n      });\n\n    case 'getEmmaPizzaRestaurant':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        settingsNetworkError: false,\n        emmaPizzaRestaurant: action.payload.restaurant,\n        emmaPizzaRestaurantMetaData: _objectSpread(_objectSpread({}, state.emmaPizzaRestaurantMetaData), {}, {\n          language: action.payload.language\n        })\n      });\n\n    case 'clearRestaurant':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        restaurant: {}\n      });\n\n    case 'setIsDataFetching':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isDataFetching: true\n      });\n\n    default:\n      return _objectSpread({}, state);\n  }\n};\n\nvar SCREEN_WIDTH = Dimensions.get('window').width;\nvar SCREEN_HEIGHT = Dimensions.get('window').height;\nvar widthScale = SCREEN_WIDTH / 375;\nvar heightScale = SCREEN_HEIGHT / 667;\nvar deviceFontScale = PixelRatio.getFontScale();\nvar fontScale = deviceFontScale > 1 ? widthScale / deviceFontScale : widthScale;\nvar SCALES = {\n  widthScale: widthScale > 1.15 ? 1.15 : widthScale,\n  heightScale: heightScale,\n  fontScale: fontScale\n};\n\nvar clearSettingsNetworkError = function clearSettingsNetworkError(dispatch) {\n  return function () {\n    dispatch({\n      type: 'clearSettingsNetworkError'\n    });\n  };\n};\n\nvar clearDeliveryCitiesSettingsNetworkError = function clearDeliveryCitiesSettingsNetworkError(dispatch) {\n  return function () {\n    dispatch({\n      type: 'clearDeliveryCitiesSettingsNetworkError'\n    });\n  };\n};\n\nvar setLanguage = function setLanguage(dispatch) {\n  return function _callee(language) {\n    var fromSettings,\n        _args = arguments;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            fromSettings = _args.length > 1 && _args[1] !== undefined ? _args[1] : false;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem('language', language));\n\n          case 3:\n            languages.current = language;\n            dispatch({\n              type: 'setLanguage',\n              payload: language\n            });\n\n            if (fromSettings) {\n              navigate('Start');\n            }\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar getDeliveryCities = function getDeliveryCities(dispatch) {\n  return function _callee2() {\n    var language, lang, url, response, cities;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            dispatch({\n              type: 'setIsDataFetching'\n            });\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('language'));\n\n          case 4:\n            language = _context2.sent;\n            lang = prepareLanguageToHttpRequest(language);\n            url = BASE_URL + \"/order/cities?lang=\" + lang + \"&version=\" + APP_VERSION;\n            _context2.next = 9;\n            return _regeneratorRuntime.awrap(axiosWithErrorHandler.get(url));\n\n          case 9:\n            response = _context2.sent;\n\n            if (!response) {\n              _context2.next = 15;\n              break;\n            }\n\n            cities = response.data.data;\n            cities.push({\n              id: 0,\n              name: translator.translate(language, 'Інший населений пункт')\n            });\n            dispatch({\n              type: 'getDeliveryCities',\n              payload: cities\n            });\n            return _context2.abrupt(\"return\", cities);\n\n          case 15:\n            _context2.next = 20;\n            break;\n\n          case 17:\n            _context2.prev = 17;\n            _context2.t0 = _context2[\"catch\"](0);\n            dispatch({\n              type: 'setSettingsNetworkError',\n              payload: true\n            });\n\n          case 20:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 17]], Promise);\n  };\n};\n\nvar getRestaurant = function getRestaurant(dispatch) {\n  return function _callee3(page_id) {\n    var language, lang, url, response, restaurant;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            dispatch({\n              type: 'setIsDataFetching'\n            });\n            _context3.next = 4;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('language'));\n\n          case 4:\n            language = _context3.sent;\n            lang = prepareLanguageToHttpRequest(language);\n            url = BASE_URL + \"/restaurant/restaurant?lang=\" + lang + \"&version=\" + APP_VERSION + \"&restaurant_id=\" + page_id;\n            _context3.next = 9;\n            return _regeneratorRuntime.awrap(axiosWithErrorHandler.get(url));\n\n          case 9:\n            response = _context3.sent;\n\n            if (!response) {\n              _context3.next = 14;\n              break;\n            }\n\n            restaurant = response.data.data;\n            dispatch({\n              type: 'getRestaurant',\n              payload: {\n                restaurant: restaurant,\n                language: language\n              }\n            });\n            return _context3.abrupt(\"return\", restaurant);\n\n          case 14:\n            _context3.next = 19;\n            break;\n\n          case 16:\n            _context3.prev = 16;\n            _context3.t0 = _context3[\"catch\"](0);\n            dispatch({\n              type: 'setSettingsNetworkError',\n              payload: true\n            });\n\n          case 19:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 16]], Promise);\n  };\n};\n\nvar getEmmaPizzaRestaurant = function getEmmaPizzaRestaurant(dispatch) {\n  return function _callee4() {\n    var language, lang, url, response, restaurant;\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            _context4.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('language'));\n\n          case 3:\n            language = _context4.sent;\n            lang = prepareLanguageToHttpRequest(language);\n            url = BASE_URL + \"/restaurant/restaurant-emma-pizza?lang=\" + lang + \"&version=\" + APP_VERSION;\n            _context4.next = 8;\n            return _regeneratorRuntime.awrap(axiosWithErrorHandler.get(url));\n\n          case 8:\n            response = _context4.sent;\n\n            if (!response) {\n              _context4.next = 14;\n              break;\n            }\n\n            restaurant = response.data.data;\n            restaurant.page_data = response.data.page_data || null;\n            dispatch({\n              type: 'getEmmaPizzaRestaurant',\n              payload: {\n                restaurant: restaurant,\n                language: language\n              }\n            });\n            return _context4.abrupt(\"return\", restaurant);\n\n          case 14:\n            _context4.next = 19;\n            break;\n\n          case 16:\n            _context4.prev = 16;\n            _context4.t0 = _context4[\"catch\"](0);\n            dispatch({\n              type: 'setSettingsNetworkError',\n              payload: true\n            });\n\n          case 19:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, [[0, 16]], Promise);\n  };\n};\n\nvar clearRestaurant = function clearRestaurant(dispatch) {\n  return function () {\n    dispatch({\n      type: 'clearRestaurant'\n    });\n  };\n};\n\nvar getAppSettings = function getAppSettings(dispatch) {\n  return function _callee5() {\n    var language, lang, url, response, settings, contacts, home_city_id;\n    return _regeneratorRuntime.async(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.prev = 0;\n            _context5.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('language'));\n\n          case 3:\n            language = _context5.sent;\n            lang = prepareLanguageToHttpRequest(language);\n            url = BASE_URL + \"/setting/settings?lang=\" + lang + \"&version=\" + APP_VERSION;\n            _context5.next = 8;\n            return _regeneratorRuntime.awrap(axiosWithErrorHandler.get(url));\n\n          case 8:\n            response = _context5.sent;\n\n            if (!response) {\n              _context5.next = 17;\n              break;\n            }\n\n            settings = response.data.data || null;\n            contacts = settings.contacts;\n            home_city_id = settings.orderDefaultCityId ? parseInt(settings.orderDefaultCityId) : 0;\n\n            if (!(settings && contacts)) {\n              _context5.next = 16;\n              break;\n            }\n\n            dispatch({\n              type: 'setSettings',\n              payload: {\n                settings: settings,\n                contacts: contacts,\n                home_city_id: home_city_id\n              }\n            });\n            return _context5.abrupt(\"return\", settings);\n\n          case 16:\n            return _context5.abrupt(\"return\", false);\n\n          case 17:\n            _context5.next = 22;\n            break;\n\n          case 19:\n            _context5.prev = 19;\n            _context5.t0 = _context5[\"catch\"](0);\n            dispatch({\n              type: 'setSettingsNetworkError',\n              payload: true\n            });\n\n          case 22:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, [[0, 19]], Promise);\n  };\n};\n\nvar setSettingsNetworkError = function setSettingsNetworkError(dispatch) {\n  return function () {\n    dispatch({\n      type: 'setSettingsNetworkError',\n      payload: true\n    });\n  };\n};\n\nvar _createDataContext = createDataContext(settingsReducer, {\n  clearSettingsNetworkError: clearSettingsNetworkError,\n  clearDeliveryCitiesSettingsNetworkError: clearDeliveryCitiesSettingsNetworkError,\n  setLanguage: setLanguage,\n  getDeliveryCities: getDeliveryCities,\n  getRestaurant: getRestaurant,\n  clearRestaurant: clearRestaurant,\n  getAppSettings: getAppSettings,\n  setSettingsNetworkError: setSettingsNetworkError,\n  getEmmaPizzaRestaurant: getEmmaPizzaRestaurant\n}, {\n  appSettings: {},\n  contacts: {},\n  homeCityId: null,\n  deliveryCities: [],\n  scales: SCALES,\n  settingsNetworkError: false,\n  deliveryCitiesSettingsNetworkError: false,\n  isDataFetching: false,\n  language: languages.current,\n  screen_width: SCREEN_WIDTH,\n  restaurant: {},\n  restaurantMetaData: {\n    language: null\n  },\n  apiVersion: APP_VERSION,\n  emmaPizzaRestaurant: {},\n  emmaPizzaRestaurantMetaData: {\n    language: null\n  }\n}),\n    Provider = _createDataContext.Provider,\n    Context = _createDataContext.Context;\n\nexport { Provider, Context };","map":{"version":3,"sources":["/home/alex/workspace/papamama/src/context/AppSettingsContext.js"],"names":["createDataContext","navigate","axiosWithErrorHandler","languages","prepareLanguageToHttpRequest","BASE_URL","APP_VERSION","translator","settingsReducer","state","action","type","language","payload","albums","album","deliveryCities","serviceInfo","settingsNetworkError","isDataFetching","appSettings","settings","contacts","homeCityId","home_city_id","deliveryCitiesSettingsNetworkError","restaurant","restaurantMetaData","emmaPizzaRestaurant","emmaPizzaRestaurantMetaData","SCREEN_WIDTH","Dimensions","get","width","SCREEN_HEIGHT","height","widthScale","heightScale","deviceFontScale","PixelRatio","getFontScale","fontScale","SCALES","clearSettingsNetworkError","dispatch","clearDeliveryCitiesSettingsNetworkError","setLanguage","fromSettings","AsyncStorage","setItem","current","getDeliveryCities","getItem","lang","url","response","cities","data","push","id","name","translate","getRestaurant","page_id","getEmmaPizzaRestaurant","page_data","clearRestaurant","getAppSettings","orderDefaultCityId","parseInt","setSettingsNetworkError","scales","screen_width","apiVersion","Provider","Context"],"mappings":"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","sourcesContent":["//Imports\nimport createDataContext from \"./createDataContext\";\nimport { Dimensions, AsyncStorage, PixelRatio } from 'react-native';\n//Navigation\nimport { navigate } from \"../_navigationRefs\";\n//Api\nimport axiosWithErrorHandler from \"../services/axiosWithErrorHandler\";\n//Language detector\nimport { languages } from \"../_language\";\n//Helpers\nimport { prepareLanguageToHttpRequest } from \"../helpers/helpers\";\n//Global vars\nimport { BASE_URL, APP_VERSION } from \"../different/global_vars\";\n//Localization\nimport translator from \"../translator/translator\";\n\n\n\n\n//Reducer\nconst settingsReducer = (state, action) => {\n    switch (action.type) {\n        case 'setLanguage':\n            return { ...state, language: action.payload, albums: [], album: {}, deliveryCities: [], serviceInfo: {} };\n        case 'setSettings':\n            return { ...state, settingsNetworkError: false, isDataFetching: false, appSettings: action.payload.settings, contacts: action.payload.contacts, homeCityId: action.payload.home_city_id };\n        case 'clearSettingsNetworkError':\n            return { ...state, settingsNetworkError: false, isDataFetching: false }\n        case 'clearDeliveryCitiesSettingsNetworkError':\n            return { ...state, deliveryCitiesSettingsNetworkError: false, isDataFetching: false }\n        case 'setSettingsNetworkError':\n            return { ...state, settingsNetworkError: action.payload, isDataFetching: false }\n        case 'getDeliveryCities':\n            return { ...state, settingsNetworkError: false, isDataFetching: false, deliveryCities: action.payload }\n        case 'getRestaurant':\n            return { ...state, settingsNetworkError: false, isDataFetching: false, restaurant: action.payload.restaurant, restaurantMetaData: { ...state.restaurantMetaData, language: action.payload.language } }\n        case 'getEmmaPizzaRestaurant':\n            return {\n                ...state,\n                settingsNetworkError: false,\n                emmaPizzaRestaurant: action.payload.restaurant,\n                emmaPizzaRestaurantMetaData: { ...state.emmaPizzaRestaurantMetaData, language: action.payload.language }\n            }\n        case 'clearRestaurant':\n            return { ...state, restaurant: {} }\n        case 'setIsDataFetching':\n            return { ...state, isDataFetching: true }\n        default:\n            return { ...state }\n    }\n};\n\n\n\n\n//Calculations\nconst SCREEN_WIDTH = Dimensions.get('window').width;\nconst SCREEN_HEIGHT = Dimensions.get('window').height;\n\nconst widthScale = SCREEN_WIDTH / 375;\nconst heightScale = SCREEN_HEIGHT / 667;\n\nlet deviceFontScale = PixelRatio.getFontScale();\n\nconst fontScale = (deviceFontScale > 1) ? widthScale / deviceFontScale : widthScale;\n\nconst SCALES = {\n    widthScale: widthScale > 1.15 ? 1.15 : widthScale,\n    heightScale: heightScale,\n    fontScale: fontScale\n}\n\n\n\n//Actions\nconst clearSettingsNetworkError = dispatch => () => {\n    dispatch({ type: 'clearSettingsNetworkError' });\n}\n\nconst clearDeliveryCitiesSettingsNetworkError = dispatch => () => {\n    dispatch({ type: 'clearDeliveryCitiesSettingsNetworkError' });\n}\n\nconst setLanguage = dispatch => async (language, fromSettings = false) => {\n    await AsyncStorage.setItem('language', language);\n    languages.current = language;\n    dispatch({ type: 'setLanguage', payload: language });\n    if (fromSettings) {\n        navigate('Start')\n    }\n}\n\n\nconst getDeliveryCities = dispatch => async () => {\n    try {\n        dispatch({ type: 'setIsDataFetching' });\n        const language = await AsyncStorage.getItem('language');\n        const lang = prepareLanguageToHttpRequest(language);\n        const url = `${BASE_URL}/order/cities?lang=${lang}&version=${APP_VERSION}`;\n        const response = await axiosWithErrorHandler.get(url);\n\n        if (response) {\n            let cities = response.data.data;\n                cities.push({\n                    id: 0,\n                    name: translator.translate(language, 'Інший населений пункт')\n                });\n            dispatch({ type: 'getDeliveryCities', payload: cities });\n            return cities;\n        }\n    } catch (err) {\n        dispatch({ type: 'setSettingsNetworkError', payload: true });\n    }\n}\n\n\nconst getRestaurant = dispatch => async (page_id) => {\n    try {\n        dispatch({ type: 'setIsDataFetching' });\n        const language = await AsyncStorage.getItem('language');\n        const lang = prepareLanguageToHttpRequest(language);\n        const url = `${BASE_URL}/restaurant/restaurant?lang=${lang}&version=${APP_VERSION}&restaurant_id=${page_id}`;\n        const response = await axiosWithErrorHandler.get(url);\n\n        if (response) {\n            let restaurant = response.data.data;\n            dispatch({ type: 'getRestaurant', payload: { restaurant, language } });\n            return restaurant;\n        }\n    } catch (err) {\n        dispatch({ type: 'setSettingsNetworkError', payload: true });\n    }\n}\n\n\nconst getEmmaPizzaRestaurant = dispatch => async () => {\n    try {\n        const language = await AsyncStorage.getItem('language');\n        const lang = prepareLanguageToHttpRequest(language);\n        const url = `${BASE_URL}/restaurant/restaurant-emma-pizza?lang=${lang}&version=${APP_VERSION}`;\n        const response = await axiosWithErrorHandler.get(url);\n\n        if (response) {\n            let restaurant = response.data.data;\n                restaurant.page_data = response.data.page_data || null;\n            dispatch({ type: 'getEmmaPizzaRestaurant', payload: { restaurant, language } });\n            return restaurant;\n        }\n    } catch (err) {\n        dispatch({ type: 'setSettingsNetworkError', payload: true });\n    }\n}\n\n\n\nconst clearRestaurant = dispatch => () => {\n    dispatch({ type: 'clearRestaurant' })\n}\n\n\nconst getAppSettings = dispatch => async () => {\n    try {\n        const language = await AsyncStorage.getItem('language');\n        const lang = prepareLanguageToHttpRequest(language);\n        const url = `${BASE_URL}/setting/settings?lang=${lang}&version=${APP_VERSION}`;\n        const response = await axiosWithErrorHandler.get(url);\n\n        if (response) {\n            let settings = response.data.data || null;\n            let contacts = settings.contacts;\n\n            let home_city_id = settings.orderDefaultCityId ? parseInt(settings.orderDefaultCityId) : 0;\n            \n            if (settings && contacts) {\n                dispatch({ type: 'setSettings', payload: { settings, contacts, home_city_id } });\n                return settings;\n            }\n            return false;\n        }\n    } catch (err) {\n        dispatch({ type: 'setSettingsNetworkError', payload: true });\n    }\n}\n\n\nconst setSettingsNetworkError = dispatch => () => {\n    dispatch({ type: 'setSettingsNetworkError', payload: true })\n}\n\n\n\n//Export\nexport const { Provider, Context } = createDataContext(\n    settingsReducer,\n    {\n        clearSettingsNetworkError,\n        clearDeliveryCitiesSettingsNetworkError,\n        setLanguage,\n        getDeliveryCities,\n        getRestaurant,\n        clearRestaurant,\n        getAppSettings,\n        setSettingsNetworkError,\n        getEmmaPizzaRestaurant\n    },\n    {\n        appSettings: {},\n        contacts: {},\n        homeCityId: null,\n        deliveryCities: [],\n        scales: SCALES,\n        settingsNetworkError: false,\n        deliveryCitiesSettingsNetworkError: false,\n        isDataFetching: false,\n        language: languages.current,\n        screen_width: SCREEN_WIDTH,\n        restaurant: {},\n        restaurantMetaData: {\n            language: null\n        },\n        apiVersion: APP_VERSION,\n        emmaPizzaRestaurant: {},\n        emmaPizzaRestaurantMetaData: {\n            language: null\n        }\n    }\n);\n"]},"metadata":{},"sourceType":"module"}