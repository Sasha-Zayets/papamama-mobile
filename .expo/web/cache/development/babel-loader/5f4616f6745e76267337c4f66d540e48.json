{"ast":null,"code":"var _jsxFileName = \"/home/alex/workspace/papamama/src/screens/ReadNotificationScreen.js\";\nimport React, { useContext, useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport { Context as AppSettingsContext } from \"../context/AppSettingsContext\";\nimport { Context as AuthContext } from \"../context/AuthContext\";\nimport { NavigationEvents } from 'react-navigation';\nimport { createIconSetFromIcoMoon } from \"@expo/vector-icons\";\nimport icoMoonConfig from \"../../selection.json\";\nvar IcoMoonIcon = createIconSetFromIcoMoon(icoMoonConfig, 'icomoon', 'icomoon.ttf');\nimport moment from \"moment\";\nimport 'moment/locale/uk';\nimport 'moment/locale/ru';\nimport { prepareLanguageToHttpRequest } from \"../helpers/helpers\";\nimport Header from \"../components/shared/Header\";\nimport { SafeView, Block, Spacer, VerticalSpacer } from \"../components/shared\";\nimport { ButtonOrder } from \"../components/buttons\";\nimport styles from \"../styles/screens/read-notification-screen\";\nimport { app_styles } from \"../styles/app_styles\";\nimport translator from \"../translator/translator\";\n\nvar ReadNotificationScreen = function ReadNotificationScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useContext = useContext(AppSettingsContext),\n      _useContext$state = _useContext.state,\n      scales = _useContext$state.scales,\n      language = _useContext$state.language,\n      contacts = _useContext$state.contacts;\n\n  var _useContext2 = useContext(AuthContext),\n      _useContext2$state = _useContext2.state,\n      networkError = _useContext2$state.networkError,\n      notification = _useContext2$state.notification,\n      clearNetworkError = _useContext2.clearNetworkError,\n      clearNotification = _useContext2.clearNotification,\n      setNetworkError = _useContext2.setNetworkError,\n      getNotification = _useContext2.getNotification;\n\n  useEffect(function () {\n    return function () {\n      handleBlur();\n    };\n  }, [language]);\n\n  var handleFocus = function handleFocus() {\n    if (!notification) {\n      var id = navigation.getParam('notificationId');\n      var status = navigation.getParam('notificationStatus');\n      if (!id || !status) return setNetworkError();\n      getNotification(id, status);\n    }\n  };\n\n  var handleBlur = function handleBlur() {\n    if (networkError) {\n      clearNetworkError();\n    }\n\n    clearNotification();\n  };\n\n  var transformUnixTime = function transformUnixTime(time) {\n    var lang = prepareLanguageToHttpRequest(language);\n    moment.locale(lang);\n    return moment(parseInt(time) * 1000).format('DD MMMM YYYY HH:mm');\n  };\n\n  var callManager = function callManager() {\n    if (!contacts.phone) return;\n    var cleanedPhoneNumber = contacts.phone.replace(/\\D||\\s/g, \"\");\n\n    if (cleanedPhoneNumber.indexOf('38') === 0) {\n      cleanedPhoneNumber = cleanedPhoneNumber.substring(2);\n    }\n\n    var link = Platform.OS === 'ios' ? \"tel://+38\" + cleanedPhoneNumber : \"tel:+38\" + cleanedPhoneNumber;\n    Linking.openURL(link);\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(SafeView, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, React.createElement(NavigationEvents, {\n    onWillFocus: function onWillFocus() {\n      return handleFocus();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }), React.createElement(Header, {\n    title: translator.translate(language, \"Повідомлення\"),\n    backAllowed: true,\n    navigation: navigation,\n    noIcons: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }), React.createElement(View, {\n    style: styles(scales).body,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }\n  }, notification ? React.createElement(Block, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 33\n    }\n  }, React.createElement(Spacer, {\n    spaceHeight: 20,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 37\n    }\n  }), React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 37\n    }\n  }, notification.status ? React.createElement(React.Fragment, null, React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 57\n    }\n  }, React.createElement(Text, {\n    style: styles(scales).title_bold,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 61\n    }\n  }, notification.title)), React.createElement(Spacer, {\n    spaceHeight: 20,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 57\n    }\n  })) : null, React.createElement(View, {\n    style: styles(scales).row,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 41\n    }\n  }, React.createElement(View, {\n    style: styles(scales).icon_container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 45\n    }\n  }, React.createElement(IcoMoonIcon, {\n    name: \"date\",\n    color: app_styles(scales).colors.text.primary,\n    size: Math.round(scales.widthScale * 18),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 49\n    }\n  })), React.createElement(Text, {\n    style: styles(scales).title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 45\n    }\n  }, transformUnixTime(notification.date))), React.createElement(Spacer, {\n    spaceHeight: 5,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 41\n    }\n  }), React.createElement(View, {\n    style: styles(scales).row,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 41\n    }\n  }, React.createElement(View, {\n    style: styles(scales).icon_container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 45\n    }\n  }, React.createElement(IcoMoonIcon, {\n    name: \"bell1\",\n    color: app_styles(scales).colors.text.primary,\n    size: Math.round(scales.widthScale * 18),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 49\n    }\n  })), React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 45\n    }\n  }, React.createElement(Text, {\n    style: styles(scales).title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 49\n    }\n  }, notification.text))), notification.status ? React.createElement(React.Fragment, null, React.createElement(Spacer, {\n    spaceHeight: 40,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 57\n    }\n  }), React.createElement(View, {\n    style: [styles(scales).row, styles(scales).button_container],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 57\n    }\n  }, React.createElement(ButtonOrder, {\n    title: translator.translate(language, \"З'єднатися з менеджером\"),\n    callback: callManager,\n    icon: true,\n    iconName: \"phone-volume\",\n    iconSize: 18,\n    color: app_styles(scales).colors.app.blue,\n    noStretch: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 61\n    }\n  }))) : null)) : null)));\n};\n\nexport default ReadNotificationScreen;","map":{"version":3,"sources":["/home/alex/workspace/papamama/src/screens/ReadNotificationScreen.js"],"names":["React","useContext","useState","useEffect","Context","AppSettingsContext","AuthContext","NavigationEvents","createIconSetFromIcoMoon","icoMoonConfig","IcoMoonIcon","moment","prepareLanguageToHttpRequest","Header","SafeView","Block","Spacer","VerticalSpacer","ButtonOrder","styles","app_styles","translator","ReadNotificationScreen","navigation","state","scales","language","contacts","networkError","notification","clearNetworkError","clearNotification","setNetworkError","getNotification","handleBlur","handleFocus","id","getParam","status","transformUnixTime","time","lang","locale","parseInt","format","callManager","phone","cleanedPhoneNumber","replace","indexOf","substring","link","Platform","OS","Linking","openURL","translate","body","title_bold","title","row","icon_container","colors","text","primary","Math","round","widthScale","date","flex","button_container","app","blue"],"mappings":";AAEA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,QAA3B,EAAqCC,SAArC,QAAqD,OAArD;;;;;AAIA,SAAQC,OAAO,IAAIC,kBAAnB;AACA,SAAQD,OAAO,IAAIE,WAAnB;AAEA,SAAQC,gBAAR,QAA+B,kBAA/B;AAEA,SAAQC,wBAAR;AACA,OAAOC,aAAP;AAEA,IAAMC,WAAW,GAAGF,wBAAwB,CAACC,aAAD,EAAgB,SAAhB,EAA2B,aAA3B,CAA5C;AAEA,OAAOE,MAAP,MAAmB,QAAnB;AACA,OAAO,kBAAP;AACA,OAAO,kBAAP;AAEA,SAASC,4BAAT;AAEA,OAAOC,MAAP;AACA,SAAQC,QAAR,EAAkBC,KAAlB,EAAyBC,MAAzB,EAAiCC,cAAjC;AACA,SAAQC,WAAR;AAEA,OAAOC,MAAP;AACA,SAAQC,UAAR;AAEA,OAAOC,UAAP;;AAKA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,OAAkB;AAAA,MAAhBC,UAAgB,QAAhBA,UAAgB;;AAAA,oBAECtB,UAAU,CAACI,kBAAD,CAFX;AAAA,sCAEtCmB,KAFsC;AAAA,MAE9BC,MAF8B,qBAE9BA,MAF8B;AAAA,MAEtBC,QAFsB,qBAEtBA,QAFsB;AAAA,MAEZC,QAFY,qBAEZA,QAFY;;AAAA,qBAGyE1B,UAAU,CAACK,WAAD,CAHnF;AAAA,wCAGtCkB,KAHsC;AAAA,MAG9BI,YAH8B,sBAG9BA,YAH8B;AAAA,MAGhBC,YAHgB,sBAGhBA,YAHgB;AAAA,MAGDC,iBAHC,gBAGDA,iBAHC;AAAA,MAGkBC,iBAHlB,gBAGkBA,iBAHlB;AAAA,MAGqCC,eAHrC,gBAGqCA,eAHrC;AAAA,MAGsDC,eAHtD,gBAGsDA,eAHtD;;AAM7C9B,EAAAA,SAAS,CAAC,YAAM;AACZ,WAAO,YAAM;AACT+B,MAAAA,UAAU;AACb,KAFD;AAGH,GAJQ,EAIN,CAACR,QAAD,CAJM,CAAT;;AAOA,MAAMS,WAAW,GAAG,SAAdA,WAAc,GAAM;AACtB,QAAI,CAACN,YAAL,EAAmB;AACf,UAAIO,EAAE,GAAGb,UAAU,CAACc,QAAX,CAAoB,gBAApB,CAAT;AACA,UAAIC,MAAM,GAAGf,UAAU,CAACc,QAAX,CAAoB,oBAApB,CAAb;AACA,UAAI,CAACD,EAAD,IAAO,CAACE,MAAZ,EAAoB,OAAON,eAAe,EAAtB;AACpBC,MAAAA,eAAe,CAACG,EAAD,EAAKE,MAAL,CAAf;AACH;AACJ,GAPD;;AASA,MAAMJ,UAAU,GAAG,SAAbA,UAAa,GAAM;AACrB,QAAIN,YAAJ,EAAkB;AACdE,MAAAA,iBAAiB;AACpB;;AACDC,IAAAA,iBAAiB;AACpB,GALD;;AAQA,MAAMQ,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,IAAD,EAAU;AAChC,QAAMC,IAAI,GAAG7B,4BAA4B,CAACc,QAAD,CAAzC;AACAf,IAAAA,MAAM,CAAC+B,MAAP,CAAcD,IAAd;AACA,WAAO9B,MAAM,CAACgC,QAAQ,CAACH,IAAD,CAAR,GAAiB,IAAlB,CAAN,CAA8BI,MAA9B,CAAqC,oBAArC,CAAP;AACH,GAJD;;AAOA,MAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACtB,QAAI,CAAClB,QAAQ,CAACmB,KAAd,EAAqB;AAErB,QAAIC,kBAAkB,GAAGpB,QAAQ,CAACmB,KAAT,CAAeE,OAAf,CAAuB,SAAvB,EAAkC,EAAlC,CAAzB;;AAEA,QAAID,kBAAkB,CAACE,OAAnB,CAA2B,IAA3B,MAAqC,CAAzC,EAA4C;AACxCF,MAAAA,kBAAkB,GAAGA,kBAAkB,CAACG,SAAnB,CAA6B,CAA7B,CAArB;AACH;;AACD,QAAMC,IAAI,GAAGC,QAAQ,CAACC,EAAT,KAAgB,KAAhB,iBAAoCN,kBAApC,eAAqEA,kBAAlF;AACAO,IAAAA,OAAO,CAACC,OAAR,CAAgBJ,IAAhB;AACH,GAVD;;AAcA,SACI,0CACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,gBAAD;AACI,IAAA,WAAW,EAAE;AAAA,aAAMhB,WAAW,EAAjB;AAAA,KADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAII,oBAAC,MAAD;AACI,IAAA,KAAK,EAAEd,UAAU,CAACmC,SAAX,CAAqB9B,QAArB,EAA+B,cAA/B,CADX;AAEI,IAAA,WAAW,MAFf;AAGI,IAAA,UAAU,EAAEH,UAHhB;AAII,IAAA,OAAO,MAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,EAUI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEJ,MAAM,CAACM,MAAD,CAAN,CAAegC,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQ5B,YAAY,GAEJ,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,MAAD;AAAQ,IAAA,WAAW,EAAE,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQA,YAAY,CAACS,MAAb,GAEQ,0CACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEnB,MAAM,CAACM,MAAD,CAAN,CAAeiC,UAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyC7B,YAAY,CAAC8B,KAAtD,CADJ,CADJ,EAII,oBAAC,MAAD;AAAQ,IAAA,WAAW,EAAE,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CAFR,GASM,IAXd,EAaI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAExC,MAAM,CAACM,MAAD,CAAN,CAAemC,GAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEzC,MAAM,CAACM,MAAD,CAAN,CAAeoC,cAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,WAAD;AACI,IAAA,IAAI,EAAC,MADT;AAEI,IAAA,KAAK,EAAEzC,UAAU,CAACK,MAAD,CAAV,CAAmBqC,MAAnB,CAA0BC,IAA1B,CAA+BC,OAF1C;AAGI,IAAA,IAAI,EAAEC,IAAI,CAACC,KAAL,CAAWzC,MAAM,CAAC0C,UAAP,GAAoB,EAA/B,CAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,EAQI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEhD,MAAM,CAACM,MAAD,CAAN,CAAekC,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoCpB,iBAAiB,CAACV,YAAY,CAACuC,IAAd,CAArD,CARJ,CAbJ,EAuBI,oBAAC,MAAD;AAAQ,IAAA,WAAW,EAAE,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvBJ,EAwBI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEjD,MAAM,CAACM,MAAD,CAAN,CAAemC,GAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEzC,MAAM,CAACM,MAAD,CAAN,CAAeoC,cAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,WAAD;AACI,IAAA,IAAI,EAAC,OADT;AAEI,IAAA,KAAK,EAAEzC,UAAU,CAACK,MAAD,CAAV,CAAmBqC,MAAnB,CAA0BC,IAA1B,CAA+BC,OAF1C;AAGI,IAAA,IAAI,EAAEC,IAAI,CAACC,KAAL,CAAWzC,MAAM,CAAC0C,UAAP,GAAoB,EAA/B,CAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,EAQI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAACE,MAAAA,IAAI,EAAE;AAAP,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAElD,MAAM,CAACM,MAAD,CAAN,CAAekC,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoC9B,YAAY,CAACkC,IAAjD,CADJ,CARJ,CAxBJ,EAqCQlC,YAAY,CAACS,MAAb,GAEQ,0CACI,oBAAC,MAAD;AAAQ,IAAA,WAAW,EAAE,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAACnB,MAAM,CAACM,MAAD,CAAN,CAAemC,GAAhB,EAAqBzC,MAAM,CAACM,MAAD,CAAN,CAAe6C,gBAApC,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,WAAD;AACI,IAAA,KAAK,EAAEjD,UAAU,CAACmC,SAAX,CAAqB9B,QAArB,EAA+B,yBAA/B,CADX;AAEI,IAAA,QAAQ,EAAEmB,WAFd;AAGI,IAAA,IAAI,MAHR;AAII,IAAA,QAAQ,EAAC,cAJb;AAKI,IAAA,QAAQ,EAAE,EALd;AAMI,IAAA,KAAK,EAAEzB,UAAU,CAACK,MAAD,CAAV,CAAmBqC,MAAnB,CAA0BS,GAA1B,CAA8BC,IANzC;AAOI,IAAA,SAAS,MAPb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAFJ,CAFR,GAiBM,IAtDd,CAFJ,CAFI,GA+DN,IAjEd,CAVJ,CADJ,CADJ;AAmFH,CAtID;;AA0IA,eAAelD,sBAAf","sourcesContent":["//----IMPORTS----//\n//React\nimport React, {useContext, useState, useEffect} from 'react';\n//React native\nimport {View, Text, TouchableOpacity, Linking} from 'react-native';\n//Context\nimport {Context as AppSettingsContext} from \"../context/AppSettingsContext\";\nimport {Context as AuthContext} from \"../context/AuthContext\";\n//Navigation Events\nimport {NavigationEvents} from 'react-navigation';\n//React-native-vector-icons package\nimport {createIconSetFromIcoMoon} from 'react-native-vector-icons';\nimport icoMoonConfig from \"../../selection.json\";\n\nconst IcoMoonIcon = createIconSetFromIcoMoon(icoMoonConfig, 'icomoon', 'icomoon.ttf');\n//Moment\nimport moment from \"moment\";\nimport 'moment/locale/uk';\nimport 'moment/locale/ru';\n//Helpers\nimport { prepareLanguageToHttpRequest } from \"../helpers/helpers\";\n//Componetns\nimport Header from \"../components/shared/Header\";\nimport {SafeView, Block, Spacer, VerticalSpacer} from \"../components/shared\";\nimport {ButtonOrder} from \"../components/buttons\";\n//Styles\nimport styles from '../styles/screens/read-notification-screen';\nimport {app_styles} from '../styles/app_styles';\n//Localization\nimport translator from '../translator/translator';\n\n\n\n//----COMPONENT----//\nconst ReadNotificationScreen = ({navigation}) => {\n    //Data and State\n    const {state: {scales, language, contacts}} = useContext(AppSettingsContext);\n    const {state: {networkError, notification}, clearNetworkError, clearNotification, setNetworkError, getNotification} = useContext(AuthContext);\n\n    //Hooks and Methods\n    useEffect(() => {\n        return () => {\n            handleBlur();\n        }\n    }, [language]);\n\n\n    const handleFocus = () => {\n        if (!notification) {\n            let id = navigation.getParam('notificationId');\n            let status = navigation.getParam('notificationStatus');\n            if (!id || !status) return setNetworkError()\n            getNotification(id, status)\n        }\n    }\n\n    const handleBlur = () => {\n        if (networkError) {\n            clearNetworkError()\n        }\n        clearNotification();\n    }\n\n\n    const transformUnixTime = (time) => {\n        const lang = prepareLanguageToHttpRequest(language);\n        moment.locale(lang);\n        return moment(parseInt(time) * 1000).format('DD MMMM YYYY HH:mm');\n    }\n\n\n    const callManager = () => {\n        if (!contacts.phone) return;\n\n        let cleanedPhoneNumber = contacts.phone.replace(/\\D||\\s/g, \"\");\n\n        if (cleanedPhoneNumber.indexOf('38') === 0) {\n            cleanedPhoneNumber = cleanedPhoneNumber.substring(2);\n        }\n        const link = Platform.OS === 'ios' ? `tel://+38${cleanedPhoneNumber}` : `tel:+38${cleanedPhoneNumber}`;\n        Linking.openURL(link)\n    }\n\n\n    //Template\n    return (\n        <>\n            <SafeView>\n                <NavigationEvents\n                    onWillFocus={() => handleFocus()}\n                />\n                <Header\n                    title={translator.translate(language, \"Повідомлення\")}\n                    backAllowed\n                    navigation={navigation}\n                    noIcons\n                />\n                <View style={styles(scales).body}>\n                    {\n                        notification\n                            ? (\n                                <Block>\n                                    <Spacer spaceHeight={20}/>\n                                    <View>\n                                        {\n                                            notification.status\n                                                ? (\n                                                    <>\n                                                        <View>\n                                                            <Text style={styles(scales).title_bold}>{notification.title}</Text>\n                                                        </View>\n                                                        <Spacer spaceHeight={20}/>\n                                                    </>\n                                                )\n                                                : null\n                                        }\n                                        <View style={styles(scales).row}>\n                                            <View style={styles(scales).icon_container}>\n                                                <IcoMoonIcon\n                                                    name=\"date\"\n                                                    color={app_styles(scales).colors.text.primary}\n                                                    size={Math.round(scales.widthScale * 18)}\n                                                />\n                                            </View>\n                                            <Text style={styles(scales).title}>{transformUnixTime(notification.date)}</Text>\n                                        </View>                                        \n                                        <Spacer spaceHeight={5}/>\n                                        <View style={styles(scales).row}>\n                                            <View style={styles(scales).icon_container}>\n                                                <IcoMoonIcon\n                                                    name=\"bell1\"\n                                                    color={app_styles(scales).colors.text.primary}\n                                                    size={Math.round(scales.widthScale * 18)}\n                                                />\n                                            </View>\n                                            <View style={{flex: 1}}>\n                                                <Text style={styles(scales).title}>{notification.text}</Text>\n                                            </View>\n                                        </View>\n                                        {\n                                            notification.status\n                                                ? (\n                                                    <>\n                                                        <Spacer spaceHeight={40}/>\n                                                        <View style={[styles(scales).row, styles(scales).button_container]}>\n                                                            <ButtonOrder\n                                                                title={translator.translate(language, \"З'єднатися з менеджером\")}\n                                                                callback={callManager}\n                                                                icon\n                                                                iconName=\"phone-volume\"\n                                                                iconSize={18}\n                                                                color={app_styles(scales).colors.app.blue}\n                                                                noStretch\n                                                            />\n                                                        </View>\n                                                    </>\n                                                )\n                                                : null\n                                        }\n                                    </View>\n                                </Block>\n                            )\n                            : null\n                    }\n                </View>\n            </SafeView>\n        </>\n    );\n}\n\n\n//----EXPORT----//\nexport default ReadNotificationScreen;"]},"metadata":{},"sourceType":"module"}