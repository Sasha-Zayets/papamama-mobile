{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/alex/workspace/papamama/src/screens/PostScreen.js\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Context as AppSettingsContext } from \"../context/AppSettingsContext\";\nimport { NavigationEvents } from 'react-navigation';\nimport axios from \"axios\";\nimport { SafeView, DataLoadingIndicator } from \"../components/shared\";\nimport Header from \"../components/shared/Header\";\nimport { NetworkErrorModal } from \"../components/modals\";\nimport NewsCard from \"../components/news/NewsCard\";\nimport { BASE_URL, APP_VERSION } from \"../different/global_vars\";\nimport { prepareLanguageToHttpRequest } from \"../helpers/helpers\";\nimport styles from \"../styles/screens/post-screen\";\nimport translator from \"../translator/translator\";\n\nvar PostScreen = function PostScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useContext = useContext(AppSettingsContext),\n      _useContext$state = _useContext.state,\n      scales = _useContext$state.scales,\n      language = _useContext$state.language;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isDataLoading = _useState2[0],\n      setIsDataLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      networkError = _useState4[0],\n      setNetworkError = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      post = _useState6[0],\n      setPost = _useState6[1];\n\n  useEffect(function () {\n    return function () {\n      handleBlur();\n    };\n  }, [language]);\n\n  var handleFocus = function handleFocus() {\n    var event_id, lang, url, response, post_data;\n    return _regeneratorRuntime.async(function handleFocus$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            setIsDataLoading(true);\n            event_id = navigation.getParam('postId');\n            lang = prepareLanguageToHttpRequest(language);\n            url = BASE_URL + \"/event/event?event_id=\" + event_id + \"&lang=\" + lang + \"&version=\" + APP_VERSION;\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(axios.get(url));\n\n          case 7:\n            response = _context.sent;\n\n            if (!(response && response.data && response.data.data)) {\n              _context.next = 18;\n              break;\n            }\n\n            post_data = response.data.data.event;\n\n            if (!(post_data && Object.keys(post_data).length)) {\n              _context.next = 15;\n              break;\n            }\n\n            setPost(post_data);\n            return _context.abrupt(\"return\", post_data);\n\n          case 15:\n            throw new Error('No post');\n\n          case 16:\n            _context.next = 20;\n            break;\n\n          case 18:\n            setNetworkError(true);\n            setPost(null);\n\n          case 20:\n            _context.next = 25;\n            break;\n\n          case 22:\n            _context.prev = 22;\n            _context.t0 = _context[\"catch\"](0);\n            setNetworkError(true);\n\n          case 25:\n            _context.prev = 25;\n            setIsDataLoading(false);\n            return _context.finish(25);\n\n          case 28:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 22, 25, 28]], Promise);\n  };\n\n  var handleBlur = function handleBlur() {\n    setPost(null);\n\n    if (networkError) {\n      setNetworkError(false);\n    }\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(SafeView, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, React.createElement(NavigationEvents, {\n    onWillFocus: function onWillFocus() {\n      return handleFocus();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }), React.createElement(Header, {\n    title: translator.translate(language, \"Новини\"),\n    backAllowed: true,\n    navigation: navigation,\n    noIcons: true,\n    appMenu: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }\n  }), React.createElement(View, {\n    style: styles(scales).body,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  }, React.createElement(ScrollView, {\n    showsVerticalScrollIndicator: false,\n    bounces: false,\n    keyboardShouldPersistTaps: 'always',\n    contentContainerStyle: styles(scales).container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 21\n    }\n  }, !networkError ? !isDataLoading ? post ? React.createElement(NewsCard, {\n    post: post,\n    navigation: navigation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 51\n    }\n  }) : null : React.createElement(DataLoadingIndicator, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 43\n    }\n  }) : React.createElement(NetworkErrorModal, {\n    isOpened: networkError,\n    closeCallback: function closeCallback() {\n      return setNetworkError(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 35\n    }\n  })))));\n};\n\nexport default PostScreen;","map":{"version":3,"sources":["/home/alex/workspace/papamama/src/screens/PostScreen.js"],"names":["React","useContext","useEffect","useState","Context","AppSettingsContext","NavigationEvents","axios","SafeView","DataLoadingIndicator","Header","NetworkErrorModal","NewsCard","BASE_URL","APP_VERSION","prepareLanguageToHttpRequest","styles","translator","PostScreen","navigation","state","scales","language","isDataLoading","setIsDataLoading","networkError","setNetworkError","post","setPost","handleBlur","handleFocus","event_id","getParam","lang","url","get","response","data","post_data","event","Object","keys","length","Error","translate","body","container"],"mappings":"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","sourcesContent":["//----IMPORTS----//\n//React\nimport React, { useContext, useEffect, useState } from 'react';\n//React native\nimport { ScrollView, View } from 'react-native';\n//Context\nimport { Context as AppSettingsContext } from \"../context/AppSettingsContext\";\n//Navigation Events\nimport { NavigationEvents } from 'react-navigation';\n//Api\nimport axios from \"axios\";\n//Components\nimport { SafeView, DataLoadingIndicator } from \"../components/shared\";\nimport Header from \"../components/shared/Header\";\nimport { NetworkErrorModal } from \"../components/modals\";\nimport NewsCard from \"../components/news/NewsCard\";\n//Global vars\nimport { BASE_URL, APP_VERSION } from \"../different/global_vars\";\n//Helpers\nimport { prepareLanguageToHttpRequest } from \"../helpers/helpers\";\n//Styles\nimport styles from '../styles/screens/post-screen';\n//Localization\nimport translator from \"../translator/translator\";\n\n\n//----COMPONENT----//\nconst PostScreen = ({ navigation }) => {\n    //Data and State\n    const { state: { scales, language } } = useContext(AppSettingsContext);\n    const [isDataLoading, setIsDataLoading] = useState(false);\n    const [networkError, setNetworkError] = useState(false);\n    const [post, setPost] = useState(null);\n\n\n    //Methods and hooks\n    useEffect(() => {\n        return () => {\n            handleBlur()\n        };\n    }, [language]);\n\n\n    const handleFocus = async () => {\n        try {\n            setIsDataLoading(true);\n            let event_id = navigation.getParam('postId');\n            const lang = prepareLanguageToHttpRequest(language);\n            const url = `${BASE_URL}/event/event?event_id=${event_id}&lang=${lang}&version=${APP_VERSION}`;\n            const response = await axios.get(url);\n\n            if (response && response.data && response.data.data) {\n                let post_data = response.data.data.event;\n                if (post_data && Object.keys(post_data).length) {\n                    setPost(post_data)\n                    return post_data;\n                } else {\n                    throw new Error('No post');\n                }\n            } else {\n                setNetworkError(true);\n                setPost(null);\n            }\n        } catch (error) {\n            setNetworkError(true);\n        } finally {\n            setIsDataLoading(false)\n        }\n    }\n\n    const handleBlur = () => {\n        setPost(null);\n        if(networkError){\n            setNetworkError(false);\n        }\n    }\n\n\n\n\n    //Template\n    return (\n        <>\n            <SafeView>\n                <NavigationEvents\n                    onWillFocus={() => handleFocus()}\n                />\n                <Header\n                    title={translator.translate(language, \"Новини\")}\n                    backAllowed\n                    navigation={navigation}\n                    noIcons\n                    appMenu\n                />\n                <View style={styles(scales).body}>\n                    <ScrollView \n                        showsVerticalScrollIndicator={false} \n                        bounces={false} \n                        keyboardShouldPersistTaps={'always'} \n                        contentContainerStyle={styles(scales).container}\n                    >\n                        {\n                            !networkError\n                                ? (\n                                    !isDataLoading\n                                        ? (\n                                            post\n                                                ? <NewsCard\n                                                    post={post}\n                                                    navigation={navigation}\n                                                />\n                                                : null\n                                        )\n                                        : <DataLoadingIndicator />\n                                )\n                                : <NetworkErrorModal\n                                    isOpened={networkError}\n                                    closeCallback={() => setNetworkError(false)}\n                                />\n                        }\n                    </ScrollView>\n                </View>\n            </SafeView>\n        </>\n    )\n}\n\n\n\n//----EXPORT----//\nexport default PostScreen;"]},"metadata":{},"sourceType":"module"}