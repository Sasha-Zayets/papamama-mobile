{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/alex/workspace/papamama/src/screens/PasswordForgotScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport { Context as AppSettingsContext } from \"../context/AppSettingsContext\";\nimport { Context as AuthContext } from \"../context/AuthContext\";\nimport { createIconSetFromIcoMoon } from \"@expo/vector-icons\";\nimport icoMoonConfig from \"../../selection.json\";\nvar IcoMoonIcon = createIconSetFromIcoMoon(icoMoonConfig, 'icomoon', 'icomoon.ttf');\nimport Header from \"../components/shared/Header\";\nimport { SafeView, Block, Spacer } from \"../components/shared\";\nimport { ButtonPrimary } from \"../components/buttons\";\nimport { SimpleInput } from \"../components/inputs\";\nimport { PasswordResetModal, NetworkErrorModal } from \"../components/modals\";\nimport translator from \"../translator/translator\";\nimport styles from \"../styles/screens/password-forgot-screen\";\nimport { app_styles } from \"../styles/app_styles\";\n\nvar PasswordForgotScreen = function PasswordForgotScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useContext = useContext(AppSettingsContext),\n      _useContext$state = _useContext.state,\n      scales = _useContext$state.scales,\n      language = _useContext$state.language;\n\n  var _useContext2 = useContext(AuthContext),\n      _useContext2$state = _useContext2.state,\n      validationErrors = _useContext2$state.validationErrors,\n      networkError = _useContext2$state.networkError,\n      user = _useContext2$state.user,\n      clearValidationErrors = _useContext2.clearValidationErrors,\n      requestPasswordReset = _useContext2.requestPasswordReset,\n      setValidationErrors = _useContext2.setValidationErrors,\n      clearNetworkError = _useContext2.clearNetworkError,\n      clearAllValidationsErrors = _useContext2.clearAllValidationsErrors;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isDataLoading = _useState2[0],\n      setIsDataLoading = _useState2[1];\n\n  var _useState3 = useState({\n    email: null,\n    type: 'code'\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      formData = _useState4[0],\n      setFormData = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      showPasswordChangedModal = _useState6[0],\n      setShowPasswordChangedModal = _useState6[1];\n\n  useEffect(function () {\n    if (user.email) {\n      setFormData(_objectSpread(_objectSpread({}, formData), {}, {\n        email: user.email\n      }));\n    }\n\n    var listener = navigation.addListener('didBlur', function () {\n      clearAllValidationsErrors();\n    });\n    return function () {\n      listener.remove();\n    };\n  }, []);\n\n  var handleInputs = function handleInputs(name, value) {\n    setFormData(_objectSpread(_objectSpread({}, formData), {}, _defineProperty({}, name, value)));\n  };\n\n  var submitForm = function submitForm() {\n    var form, key;\n    return _regeneratorRuntime.async(function submitForm$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n\n            if (formData.email) {\n              _context.next = 4;\n              break;\n            }\n\n            setValidationErrors({\n              email: translator.translate(language, \"Поле не може бути порожнім!\")\n            });\n            return _context.abrupt(\"return\");\n\n          case 4:\n            setIsDataLoading(true);\n            form = new FormData();\n\n            for (key in formData) {\n              form.append([key], formData[key]);\n            }\n\n            _context.next = 9;\n            return _regeneratorRuntime.awrap(requestPasswordReset(form));\n\n          case 9:\n            setIsDataLoading(false);\n            setShowPasswordChangedModal(true);\n            _context.next = 16;\n            break;\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](0);\n            setIsDataLoading(false);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 13]], Promise);\n  };\n\n  var handlePasswordChangedModalClosing = function handlePasswordChangedModalClosing() {\n    setShowPasswordChangedModal(false);\n    navigation.navigate('LogIn');\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(SafeView, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, React.createElement(Header, {\n    backAllowed: true,\n    navigation: navigation,\n    title: translator.translate(language, \"Відновлення пароля\"),\n    noIcons: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  }), React.createElement(View, {\n    style: styles(scales).body,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }\n  }, !networkError ? React.createElement(Block, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 33\n    }\n  }, React.createElement(Spacer, {\n    spaceHeight: 15,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 37\n    }\n  }), React.createElement(View, {\n    style: styles(scales).logo_container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 37\n    }\n  }, React.createElement(IcoMoonIcon, {\n    name: \"logo_emma\",\n    size: Math.round(scales.widthScale * 75),\n    color: app_styles(scales).colors.app.blue,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 41\n    }\n  })), React.createElement(Spacer, {\n    spaceHeight: 120,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 37\n    }\n  }), React.createElement(SimpleInput, {\n    callback: handleInputs,\n    error: validationErrors.email,\n    placeholder: translator.translate(language, \"Електронна пошта\"),\n    clearError: clearValidationErrors,\n    value: formData.email,\n    name: \"email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 37\n    }\n  }), React.createElement(Spacer, {\n    spaceHeight: 30,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 37\n    }\n  }), React.createElement(ButtonPrimary, {\n    title: translator.translate(language, \"Відправити\"),\n    color: app_styles(scales).colors.app.blue,\n    isDataLoading: isDataLoading,\n    callback: submitForm,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 37\n    }\n  })) : React.createElement(NetworkErrorModal, {\n    isOpened: networkError,\n    closeCallback: clearNetworkError,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 31\n    }\n  })), React.createElement(PasswordResetModal, {\n    isOpened: showPasswordChangedModal,\n    closeCallback: handlePasswordChangedModalClosing,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default PasswordForgotScreen;","map":{"version":3,"sources":["/home/alex/workspace/papamama/src/screens/PasswordForgotScreen.js"],"names":["React","useEffect","useState","useContext","Context","AppSettingsContext","AuthContext","createIconSetFromIcoMoon","icoMoonConfig","IcoMoonIcon","Header","SafeView","Block","Spacer","ButtonPrimary","SimpleInput","PasswordResetModal","NetworkErrorModal","translator","styles","app_styles","PasswordForgotScreen","navigation","state","scales","language","validationErrors","networkError","user","clearValidationErrors","requestPasswordReset","setValidationErrors","clearNetworkError","clearAllValidationsErrors","isDataLoading","setIsDataLoading","email","type","formData","setFormData","showPasswordChangedModal","setShowPasswordChangedModal","listener","addListener","remove","handleInputs","name","value","submitForm","translate","form","FormData","key","append","handlePasswordChangedModalClosing","navigate","body","logo_container","Math","round","widthScale","colors","app","blue"],"mappings":"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","sourcesContent":["//----IMPORTS----//\n//React\nimport React, { useEffect, useState, useContext } from 'react';\n//React native\nimport { View } from 'react-native';\n//Context\nimport { Context as AppSettingsContext } from \"../context/AppSettingsContext\";\nimport { Context as AuthContext } from \"../context/AuthContext\";\n//React-native-vector-icons package\nimport {createIconSetFromIcoMoon} from 'react-native-vector-icons';\nimport icoMoonConfig from '../../selection.json';\n\nconst IcoMoonIcon = createIconSetFromIcoMoon(icoMoonConfig, 'icomoon', 'icomoon.ttf');\n//Componetns\nimport Header from \"../components/shared/Header\";\nimport { SafeView, Block, Spacer } from \"../components/shared\";\nimport { ButtonPrimary } from \"../components/buttons\";\nimport { SimpleInput } from \"../components/inputs\";\nimport { PasswordResetModal, NetworkErrorModal } from \"../components/modals\";\n//Localization\nimport translator from \"../translator/translator\";\n//Styles\nimport styles from '../styles/screens/password-forgot-screen';\nimport { app_styles } from '../styles/app_styles';\n\n\n\n//----COMPONENT----//\nconst PasswordForgotScreen = ({ navigation }) => {\n    //Data and State\n    const { state: { scales, language } } = useContext(AppSettingsContext);\n    const { state: { validationErrors, networkError, user }, clearValidationErrors, requestPasswordReset, setValidationErrors, clearNetworkError, clearAllValidationsErrors } = useContext(AuthContext);\n    const [isDataLoading, setIsDataLoading] = useState(false);\n    const [formData, setFormData] = useState({\n        email: null,\n        type: 'code'\n    });\n    const [showPasswordChangedModal, setShowPasswordChangedModal] = useState(false);\n\n\n\n    //Hooks and Methods\n    useEffect(() => {\n        if (user.email) {\n            setFormData({ ...formData, email: user.email });\n        }\n\n        const listener = navigation.addListener('didBlur', () => {\n            clearAllValidationsErrors()\n        });\n\n        return () => {\n            listener.remove()\n        }\n    }, []);\n\n\n    const handleInputs = (name, value) => {\n        setFormData({ ...formData, [name]: value })\n    }\n\n\n    const submitForm = async () => {\n        try {\n            if (!formData.email) {\n                setValidationErrors({ email: translator.translate(language, \"Поле не може бути порожнім!\") });\n                return;\n            }\n            setIsDataLoading(true);\n\n            let form = new FormData();\n            for (let key in formData) {\n                form.append([key], formData[key])\n            }\n\n            await requestPasswordReset(form);\n\n            setIsDataLoading(false);\n            setShowPasswordChangedModal(true);          \n        } catch (error) {\n            setIsDataLoading(false);\n        }\n    }\n\n\n\n    const handlePasswordChangedModalClosing = () => {\n        setShowPasswordChangedModal(false);\n        navigation.navigate('LogIn');\n    }\n\n\n\n\n    //Template\n    return (\n        <>\n            <SafeView>\n                <Header\n                    backAllowed\n                    navigation={navigation}\n                    title={translator.translate(language, \"Відновлення пароля\")}\n                    noIcons\n                />\n                <View style={styles(scales).body}>\n                    {\n                        !networkError\n                            ? (\n                                <Block>\n                                    <Spacer spaceHeight={15} />\n                                    <View style={styles(scales).logo_container}>\n                                        <IcoMoonIcon\n                                            name={\"logo_emma\"}\n                                            size={Math.round(scales.widthScale * 75)}\n                                            color={app_styles(scales).colors.app.blue}\n                                        />\n                                    </View>\n                                    <Spacer spaceHeight={120} />\n                                    <SimpleInput\n                                        callback={handleInputs}\n                                        error={validationErrors.email}\n                                        placeholder={translator.translate(language, \"Електронна пошта\")}\n                                        clearError={clearValidationErrors}\n                                        value={formData.email}\n                                        name=\"email\"\n                                    />\n                                    <Spacer spaceHeight={30} />\n                                    <ButtonPrimary\n                                        title={translator.translate(language, \"Відправити\")}\n                                        color={app_styles(scales).colors.app.blue}\n                                        isDataLoading={isDataLoading}\n                                        callback={submitForm}\n                                    />\n                                </Block>\n                            )\n                            : <NetworkErrorModal\n                                isOpened={networkError}\n                                closeCallback={clearNetworkError}\n                            />\n                    }\n                </View>\n\n                {/* Modal */}\n                <PasswordResetModal\n                    isOpened={showPasswordChangedModal}\n                    closeCallback={handlePasswordChangedModalClosing}\n                />\n            </SafeView>\n        </>\n    );\n}\n\n\n\n//----EXPORT----//\nexport default PasswordForgotScreen;"]},"metadata":{},"sourceType":"module"}